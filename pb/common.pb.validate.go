// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/orders/v3/common.proto

package orders

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _common_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Customer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Customer) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 255 {
		return CustomerValidationError{
			field:  "Name",
			reason: "value length must be at most 255 runes",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return CustomerValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if utf8.RuneCountInString(m.GetPhone()) > 15 {
		return CustomerValidationError{
			field:  "Phone",
			reason: "value length must be at most 15 runes",
		}
	}

	return nil
}

func (m *Customer) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Customer) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CustomerValidationError is the validation error returned by
// Customer.Validate if the designated constraints aren't met.
type CustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerValidationError) ErrorName() string { return "CustomerValidationError" }

// Error satisfies the builtin error interface
func (e CustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Item) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLineItemId()); l < 1 || l > 50 {
		return ItemValidationError{
			field:  "LineItemId",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSku()); l < 1 || l > 50 {
		return ItemValidationError{
			field:  "Sku",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	// no validation rules for Quantity

	if _, ok := _Item_Type_NotInLookup[m.GetType()]; ok {
		return ItemValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := ItemType_name[int32(m.GetType())]; !ok {
		return ItemValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for UnitPrice

	if m.GetSellerId() <= 0 {
		return ItemValidationError{
			field:  "SellerId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for BundleId

	return nil
}

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

var _Item_Type_NotInLookup = map[ItemType]struct{}{
	0: {},
}

// Validate checks the field values on PaymentDetail with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaymentDetail) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTransactionCode()) < 1 {
		return PaymentDetailValidationError{
			field:  "TransactionCode",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for PaymentType

	// no validation rules for Amount

	return nil
}

// PaymentDetailValidationError is the validation error returned by
// PaymentDetail.Validate if the designated constraints aren't met.
type PaymentDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentDetailValidationError) ErrorName() string { return "PaymentDetailValidationError" }

// Error satisfies the builtin error interface
func (e PaymentDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentDetailValidationError{}

// Validate checks the field values on PromotionApplyOn with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PromotionApplyOn) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetLineItemId()) > 50 {
		return PromotionApplyOnValidationError{
			field:  "LineItemId",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for Quantity

	return nil
}

// PromotionApplyOnValidationError is the validation error returned by
// PromotionApplyOn.Validate if the designated constraints aren't met.
type PromotionApplyOnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionApplyOnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionApplyOnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionApplyOnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionApplyOnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionApplyOnValidationError) ErrorName() string { return "PromotionApplyOnValidationError" }

// Error satisfies the builtin error interface
func (e PromotionApplyOnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotionApplyOn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionApplyOnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionApplyOnValidationError{}

// Validate checks the field values on PromotionGift with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PromotionGift) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetLineItemId()) > 50 {
		return PromotionGiftValidationError{
			field:  "LineItemId",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSku()) > 50 {
		return PromotionGiftValidationError{
			field:  "Sku",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for Quantity

	return nil
}

// PromotionGiftValidationError is the validation error returned by
// PromotionGift.Validate if the designated constraints aren't met.
type PromotionGiftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionGiftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionGiftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionGiftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionGiftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionGiftValidationError) ErrorName() string { return "PromotionGiftValidationError" }

// Error satisfies the builtin error interface
func (e PromotionGiftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotionGift.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionGiftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionGiftValidationError{}

// Validate checks the field values on PromotionVoucher with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PromotionVoucher) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quantity

	return nil
}

// PromotionVoucherValidationError is the validation error returned by
// PromotionVoucher.Validate if the designated constraints aren't met.
type PromotionVoucherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionVoucherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionVoucherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionVoucherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionVoucherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionVoucherValidationError) ErrorName() string { return "PromotionVoucherValidationError" }

// Error satisfies the builtin error interface
func (e PromotionVoucherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotionVoucher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionVoucherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionVoucherValidationError{}

// Validate checks the field values on Promotion with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Promotion) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetPromotionId() <= 1 {
		return PromotionValidationError{
			field:  "PromotionId",
			reason: "value must be greater than 1",
		}
	}

	if _, ok := _Promotion_Type_NotInLookup[m.GetType()]; ok {
		return PromotionValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := PromotionType_name[int32(m.GetType())]; !ok {
		return PromotionValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := _Promotion_ApplyType_NotInLookup[m.GetApplyType()]; ok {
		return PromotionValidationError{
			field:  "ApplyType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := PromotionApplyType_name[int32(m.GetApplyType())]; !ok {
		return PromotionValidationError{
			field:  "ApplyType",
			reason: "value must be one of the defined enum values",
		}
	}

	for idx, item := range m.GetApplyOn() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromotionValidationError{
					field:  fmt.Sprintf("ApplyOn[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DiscountAmount

	for idx, item := range m.GetGifts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PromotionValidationError{
					field:  fmt.Sprintf("Gifts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetApplyCount() <= 0 {
		return PromotionValidationError{
			field:  "ApplyCount",
			reason: "value must be greater than 0",
		}
	}

	if v, ok := interface{}(m.GetVoucher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PromotionValidationError{
				field:  "Voucher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCoupon()) > 50 {
		return PromotionValidationError{
			field:  "Coupon",
			reason: "value length must be at most 50 runes",
		}
	}

	if m.GetSellerId() <= 0 {
		return PromotionValidationError{
			field:  "SellerId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// PromotionValidationError is the validation error returned by
// Promotion.Validate if the designated constraints aren't met.
type PromotionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionValidationError) ErrorName() string { return "PromotionValidationError" }

// Error satisfies the builtin error interface
func (e PromotionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionValidationError{}

var _Promotion_Type_NotInLookup = map[PromotionType]struct{}{
	0: {},
}

var _Promotion_ApplyType_NotInLookup = map[PromotionApplyType]struct{}{
	0: {},
}

// Validate checks the field values on SimplifiedOrder with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SimplifiedOrder) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SimplifiedOrderValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SimplifiedOrderValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Notes

	if v, ok := interface{}(m.GetShippingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SimplifiedOrderValidationError{
				field:  "ShippingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GrandTotal

	// no validation rules for ReferralCode

	// no validation rules for ClientOrderId

	// no validation rules for TerminalId

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SimplifiedOrderValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SimplifiedOrderValidationError is the validation error returned by
// SimplifiedOrder.Validate if the designated constraints aren't met.
type SimplifiedOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimplifiedOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimplifiedOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimplifiedOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimplifiedOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimplifiedOrderValidationError) ErrorName() string { return "SimplifiedOrderValidationError" }

// Error satisfies the builtin error interface
func (e SimplifiedOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimplifiedOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimplifiedOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimplifiedOrderValidationError{}

// Validate checks the field values on DeliveryInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeliveryInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeliveryMethod

	// no validation rules for PickupPointCode

	// no validation rules for ExpectedDate

	// no validation rules for DeliveryType

	// no validation rules for Note

	return nil
}

// DeliveryInfoValidationError is the validation error returned by
// DeliveryInfo.Validate if the designated constraints aren't met.
type DeliveryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeliveryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeliveryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeliveryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeliveryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeliveryInfoValidationError) ErrorName() string { return "DeliveryInfoValidationError" }

// Error satisfies the builtin error interface
func (e DeliveryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeliveryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeliveryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeliveryInfoValidationError{}

// Validate checks the field values on ServiceFee with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ServiceFee) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for SubType

	// no validation rules for Name

	// no validation rules for Remote

	// no validation rules for Fee

	return nil
}

// ServiceFeeValidationError is the validation error returned by
// ServiceFee.Validate if the designated constraints aren't met.
type ServiceFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceFeeValidationError) ErrorName() string { return "ServiceFeeValidationError" }

// Error satisfies the builtin error interface
func (e ServiceFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceFeeValidationError{}

// Validate checks the field values on BillingInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BillingInfo) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return BillingInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAddress()); l < 1 || l > 255 {
		return BillingInfoValidationError{
			field:  "Address",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		return BillingInfoValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return BillingInfoValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetTaxCode()); l < 1 || l > 50 {
		return BillingInfoValidationError{
			field:  "TaxCode",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPhone()) > 15 {
		return BillingInfoValidationError{
			field:  "Phone",
			reason: "value length must be at most 15 runes",
		}
	}

	if _, ok := _BillingInfo_Type_NotInLookup[m.GetType()]; ok {
		return BillingInfoValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := TaxType_name[int32(m.GetType())]; !ok {
		return BillingInfoValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Note

	return nil
}

func (m *BillingInfo) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *BillingInfo) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// BillingInfoValidationError is the validation error returned by
// BillingInfo.Validate if the designated constraints aren't met.
type BillingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BillingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BillingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BillingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BillingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BillingInfoValidationError) ErrorName() string { return "BillingInfoValidationError" }

// Error satisfies the builtin error interface
func (e BillingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBillingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BillingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BillingInfoValidationError{}

var _BillingInfo_Type_NotInLookup = map[TaxType]struct{}{
	0: {},
}

// Validate checks the field values on ShippingInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ShippingInfo) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return ShippingInfoValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 15 {
		return ShippingInfoValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 15 runes, inclusive",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return ShippingInfoValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetStreetAddress()); l < 1 || l > 255 {
		return ShippingInfoValidationError{
			field:  "StreetAddress",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	// no validation rules for WardId

	// no validation rules for DistrictId

	// no validation rules for ProvinceId

	return nil
}

func (m *ShippingInfo) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ShippingInfo) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ShippingInfoValidationError is the validation error returned by
// ShippingInfo.Validate if the designated constraints aren't met.
type ShippingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingInfoValidationError) ErrorName() string { return "ShippingInfoValidationError" }

// Error satisfies the builtin error interface
func (e ShippingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingInfoValidationError{}

// Validate checks the field values on CreditRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreditRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GrossGrandTotal

	// no validation rules for RequestorId

	// no validation rules for DiscountAmount

	// no validation rules for PayNowAmount

	// no validation rules for CreditAmount

	// no validation rules for DueAfterDelivery

	return nil
}

// CreditRequestValidationError is the validation error returned by
// CreditRequest.Validate if the designated constraints aren't met.
type CreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditRequestValidationError) ErrorName() string { return "CreditRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditRequestValidationError{}

// Validate checks the field values on CartPromotion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CartPromotion) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for DiscountAmount

	// no validation rules for Value

	// no validation rules for ValueType

	// no validation rules for Coupon

	// no validation rules for VoucherQuantity

	return nil
}

// CartPromotionValidationError is the validation error returned by
// CartPromotion.Validate if the designated constraints aren't met.
type CartPromotionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartPromotionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartPromotionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartPromotionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartPromotionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartPromotionValidationError) ErrorName() string { return "CartPromotionValidationError" }

// Error satisfies the builtin error interface
func (e CartPromotionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartPromotion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartPromotionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartPromotionValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CartItem) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetSku()); l < 1 || l > 50 {
		return CartItemValidationError{
			field:  "Sku",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	// no validation rules for Quantity

	return nil
}

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}
