// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderCapturingServiceClient is the client API for OrderCapturingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderCapturingServiceClient interface {
	//CaptureOrder capture order data to create a new order
	CaptureOrder(ctx context.Context, in *CaptureOrderRequest, opts ...grpc.CallOption) (*CaptureOrderResponse, error)
	// RecordPaymentIPN receive payment of an order from Payment Service
	RecordPaymentIPN(ctx context.Context, in *RecordPaymentIPNRequest, opts ...grpc.CallOption) (*RecordPaymentIPNResponse, error)
	// ChangeCODPayment update current order to COD payment
	ChangeCODPayment(ctx context.Context, in *ChangeCODPaymentRequest, opts ...grpc.CallOption) (*ChangeCODPaymentResponse, error)
	// GetOrderById get single order by its ID
	GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error)
	// ListOrders get list of order with filter
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// CancelOrder cancel an order
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// InternalScheduleOrderCommand queuing an order command for later executing
	InternalScheduleOrderCommand(ctx context.Context, in *InternalScheduleOrderCommandRequest, opts ...grpc.CallOption) (*InternalScheduleOrderCommandResponse, error)
}

type orderCapturingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderCapturingServiceClient(cc grpc.ClientConnInterface) OrderCapturingServiceClient {
	return &orderCapturingServiceClient{cc}
}

func (c *orderCapturingServiceClient) CaptureOrder(ctx context.Context, in *CaptureOrderRequest, opts ...grpc.CallOption) (*CaptureOrderResponse, error) {
	out := new(CaptureOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/CaptureOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) RecordPaymentIPN(ctx context.Context, in *RecordPaymentIPNRequest, opts ...grpc.CallOption) (*RecordPaymentIPNResponse, error) {
	out := new(RecordPaymentIPNResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/RecordPaymentIPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) ChangeCODPayment(ctx context.Context, in *ChangeCODPaymentRequest, opts ...grpc.CallOption) (*ChangeCODPaymentResponse, error) {
	out := new(ChangeCODPaymentResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/ChangeCODPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*GetOrderByIdResponse, error) {
	out := new(GetOrderByIdResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/ListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) InternalScheduleOrderCommand(ctx context.Context, in *InternalScheduleOrderCommandRequest, opts ...grpc.CallOption) (*InternalScheduleOrderCommandResponse, error) {
	out := new(InternalScheduleOrderCommandResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/InternalScheduleOrderCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderCapturingServiceServer is the server API for OrderCapturingService service.
// All implementations must embed UnimplementedOrderCapturingServiceServer
// for forward compatibility
type OrderCapturingServiceServer interface {
	//CaptureOrder capture order data to create a new order
	CaptureOrder(context.Context, *CaptureOrderRequest) (*CaptureOrderResponse, error)
	// RecordPaymentIPN receive payment of an order from Payment Service
	RecordPaymentIPN(context.Context, *RecordPaymentIPNRequest) (*RecordPaymentIPNResponse, error)
	// ChangeCODPayment update current order to COD payment
	ChangeCODPayment(context.Context, *ChangeCODPaymentRequest) (*ChangeCODPaymentResponse, error)
	// GetOrderById get single order by its ID
	GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error)
	// ListOrders get list of order with filter
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// CancelOrder cancel an order
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// InternalScheduleOrderCommand queuing an order command for later executing
	InternalScheduleOrderCommand(context.Context, *InternalScheduleOrderCommandRequest) (*InternalScheduleOrderCommandResponse, error)
	mustEmbedUnimplementedOrderCapturingServiceServer()
}

// UnimplementedOrderCapturingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderCapturingServiceServer struct {
}

func (*UnimplementedOrderCapturingServiceServer) CaptureOrder(context.Context, *CaptureOrderRequest) (*CaptureOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) RecordPaymentIPN(context.Context, *RecordPaymentIPNRequest) (*RecordPaymentIPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPaymentIPN not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) ChangeCODPayment(context.Context, *ChangeCODPaymentRequest) (*ChangeCODPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCODPayment not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*GetOrderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) InternalScheduleOrderCommand(context.Context, *InternalScheduleOrderCommandRequest) (*InternalScheduleOrderCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalScheduleOrderCommand not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) mustEmbedUnimplementedOrderCapturingServiceServer() {
}

func RegisterOrderCapturingServiceServer(s *grpc.Server, srv OrderCapturingServiceServer) {
	s.RegisterService(&_OrderCapturingService_serviceDesc, srv)
}

func _OrderCapturingService_CaptureOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).CaptureOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/CaptureOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).CaptureOrder(ctx, req.(*CaptureOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_RecordPaymentIPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPaymentIPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).RecordPaymentIPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/RecordPaymentIPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).RecordPaymentIPN(ctx, req.(*RecordPaymentIPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_ChangeCODPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCODPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).ChangeCODPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/ChangeCODPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).ChangeCODPayment(ctx, req.(*ChangeCODPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/ListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_InternalScheduleOrderCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalScheduleOrderCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).InternalScheduleOrderCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/InternalScheduleOrderCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).InternalScheduleOrderCommand(ctx, req.(*InternalScheduleOrderCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderCapturingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orders.v3.OrderCapturingService",
	HandlerType: (*OrderCapturingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptureOrder",
			Handler:    _OrderCapturingService_CaptureOrder_Handler,
		},
		{
			MethodName: "RecordPaymentIPN",
			Handler:    _OrderCapturingService_RecordPaymentIPN_Handler,
		},
		{
			MethodName: "ChangeCODPayment",
			Handler:    _OrderCapturingService_ChangeCODPayment_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderCapturingService_GetOrderById_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _OrderCapturingService_ListOrders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderCapturingService_CancelOrder_Handler,
		},
		{
			MethodName: "InternalScheduleOrderCommand",
			Handler:    _OrderCapturingService_InternalScheduleOrderCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orders/v3/capturing_service.proto",
}
