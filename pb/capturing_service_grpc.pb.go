// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderCapturingServiceClient is the client API for OrderCapturingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderCapturingServiceClient interface {
	// PrivateCaptureOrder capture order data to create a new order, use for
	// everyone
	PrivateCaptureOrder(ctx context.Context, in *PrivateCaptureOrderRequest, opts ...grpc.CallOption) (*PrivateCaptureOrderResponse, error)
	// PrivateChangeCODPayment update current order to COD payment, for customer
	PrivateChangeCODPayment(ctx context.Context, in *PrivateChangeCODPaymentRequest, opts ...grpc.CallOption) (*PrivateChangeCODPaymentResponse, error)
	// PrivateGetOrderByCode get single order by its code, for customer
	PrivateGetOrderByCode(ctx context.Context, in *PrivateGetOrderByCodeRequest, opts ...grpc.CallOption) (*PrivateGetOrderByCodeResponse, error)
	// PrivateListOrders get list of order with filter, for customer
	PrivateListOrders(ctx context.Context, in *PrivateListOrdersRequest, opts ...grpc.CallOption) (*PrivateListOrdersResponse, error)
	// PrivateCancelOrder cancel an order, for customer
	PrivateCancelOrder(ctx context.Context, in *PrivateCancelOrderRequest, opts ...grpc.CallOption) (*PrivateCancelOrderResponse, error)
	// InternalRecordPaymentIPN receive payment of an order from Payment Service
	InternalRecordPaymentIPN(ctx context.Context, in *InternalRecordPaymentIPNRequest, opts ...grpc.CallOption) (*InternalRecordPaymentIPNResponse, error)
	// InternalGetOrderByCode get single order by its code, for internal user
	InternalGetOrderByCode(ctx context.Context, in *InternalGetOrderByCodeRequest, opts ...grpc.CallOption) (*InternalGetOrderByCodeResponse, error)
	// InternalListOrders get list of order with filter, for internal user
	InternalListOrders(ctx context.Context, in *InternalListOrdersRequest, opts ...grpc.CallOption) (*InternalListOrdersResponse, error)
	// InternalScheduleOrderCommand queuing an order command for later executing
	InternalScheduleOrderCommand(ctx context.Context, in *InternalScheduleOrderCommandRequest, opts ...grpc.CallOption) (*InternalScheduleOrderCommandResponse, error)
}

type orderCapturingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderCapturingServiceClient(cc grpc.ClientConnInterface) OrderCapturingServiceClient {
	return &orderCapturingServiceClient{cc}
}

func (c *orderCapturingServiceClient) PrivateCaptureOrder(ctx context.Context, in *PrivateCaptureOrderRequest, opts ...grpc.CallOption) (*PrivateCaptureOrderResponse, error) {
	out := new(PrivateCaptureOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/PrivateCaptureOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) PrivateChangeCODPayment(ctx context.Context, in *PrivateChangeCODPaymentRequest, opts ...grpc.CallOption) (*PrivateChangeCODPaymentResponse, error) {
	out := new(PrivateChangeCODPaymentResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/PrivateChangeCODPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) PrivateGetOrderByCode(ctx context.Context, in *PrivateGetOrderByCodeRequest, opts ...grpc.CallOption) (*PrivateGetOrderByCodeResponse, error) {
	out := new(PrivateGetOrderByCodeResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/PrivateGetOrderByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) PrivateListOrders(ctx context.Context, in *PrivateListOrdersRequest, opts ...grpc.CallOption) (*PrivateListOrdersResponse, error) {
	out := new(PrivateListOrdersResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/PrivateListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) PrivateCancelOrder(ctx context.Context, in *PrivateCancelOrderRequest, opts ...grpc.CallOption) (*PrivateCancelOrderResponse, error) {
	out := new(PrivateCancelOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/PrivateCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) InternalRecordPaymentIPN(ctx context.Context, in *InternalRecordPaymentIPNRequest, opts ...grpc.CallOption) (*InternalRecordPaymentIPNResponse, error) {
	out := new(InternalRecordPaymentIPNResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/InternalRecordPaymentIPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) InternalGetOrderByCode(ctx context.Context, in *InternalGetOrderByCodeRequest, opts ...grpc.CallOption) (*InternalGetOrderByCodeResponse, error) {
	out := new(InternalGetOrderByCodeResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/InternalGetOrderByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) InternalListOrders(ctx context.Context, in *InternalListOrdersRequest, opts ...grpc.CallOption) (*InternalListOrdersResponse, error) {
	out := new(InternalListOrdersResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/InternalListOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) InternalScheduleOrderCommand(ctx context.Context, in *InternalScheduleOrderCommandRequest, opts ...grpc.CallOption) (*InternalScheduleOrderCommandResponse, error) {
	out := new(InternalScheduleOrderCommandResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/InternalScheduleOrderCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderCapturingServiceServer is the server API for OrderCapturingService service.
// All implementations must embed UnimplementedOrderCapturingServiceServer
// for forward compatibility
type OrderCapturingServiceServer interface {
	// PrivateCaptureOrder capture order data to create a new order, use for
	// everyone
	PrivateCaptureOrder(context.Context, *PrivateCaptureOrderRequest) (*PrivateCaptureOrderResponse, error)
	// PrivateChangeCODPayment update current order to COD payment, for customer
	PrivateChangeCODPayment(context.Context, *PrivateChangeCODPaymentRequest) (*PrivateChangeCODPaymentResponse, error)
	// PrivateGetOrderByCode get single order by its code, for customer
	PrivateGetOrderByCode(context.Context, *PrivateGetOrderByCodeRequest) (*PrivateGetOrderByCodeResponse, error)
	// PrivateListOrders get list of order with filter, for customer
	PrivateListOrders(context.Context, *PrivateListOrdersRequest) (*PrivateListOrdersResponse, error)
	// PrivateCancelOrder cancel an order, for customer
	PrivateCancelOrder(context.Context, *PrivateCancelOrderRequest) (*PrivateCancelOrderResponse, error)
	// InternalRecordPaymentIPN receive payment of an order from Payment Service
	InternalRecordPaymentIPN(context.Context, *InternalRecordPaymentIPNRequest) (*InternalRecordPaymentIPNResponse, error)
	// InternalGetOrderByCode get single order by its code, for internal user
	InternalGetOrderByCode(context.Context, *InternalGetOrderByCodeRequest) (*InternalGetOrderByCodeResponse, error)
	// InternalListOrders get list of order with filter, for internal user
	InternalListOrders(context.Context, *InternalListOrdersRequest) (*InternalListOrdersResponse, error)
	// InternalScheduleOrderCommand queuing an order command for later executing
	InternalScheduleOrderCommand(context.Context, *InternalScheduleOrderCommandRequest) (*InternalScheduleOrderCommandResponse, error)
	mustEmbedUnimplementedOrderCapturingServiceServer()
}

// UnimplementedOrderCapturingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderCapturingServiceServer struct {
}

func (*UnimplementedOrderCapturingServiceServer) PrivateCaptureOrder(context.Context, *PrivateCaptureOrderRequest) (*PrivateCaptureOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateCaptureOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) PrivateChangeCODPayment(context.Context, *PrivateChangeCODPaymentRequest) (*PrivateChangeCODPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateChangeCODPayment not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) PrivateGetOrderByCode(context.Context, *PrivateGetOrderByCodeRequest) (*PrivateGetOrderByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateGetOrderByCode not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) PrivateListOrders(context.Context, *PrivateListOrdersRequest) (*PrivateListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateListOrders not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) PrivateCancelOrder(context.Context, *PrivateCancelOrderRequest) (*PrivateCancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateCancelOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) InternalRecordPaymentIPN(context.Context, *InternalRecordPaymentIPNRequest) (*InternalRecordPaymentIPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalRecordPaymentIPN not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) InternalGetOrderByCode(context.Context, *InternalGetOrderByCodeRequest) (*InternalGetOrderByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalGetOrderByCode not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) InternalListOrders(context.Context, *InternalListOrdersRequest) (*InternalListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalListOrders not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) InternalScheduleOrderCommand(context.Context, *InternalScheduleOrderCommandRequest) (*InternalScheduleOrderCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalScheduleOrderCommand not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) mustEmbedUnimplementedOrderCapturingServiceServer() {
}

func RegisterOrderCapturingServiceServer(s *grpc.Server, srv OrderCapturingServiceServer) {
	s.RegisterService(&_OrderCapturingService_serviceDesc, srv)
}

func _OrderCapturingService_PrivateCaptureOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateCaptureOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).PrivateCaptureOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/PrivateCaptureOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).PrivateCaptureOrder(ctx, req.(*PrivateCaptureOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_PrivateChangeCODPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateChangeCODPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).PrivateChangeCODPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/PrivateChangeCODPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).PrivateChangeCODPayment(ctx, req.(*PrivateChangeCODPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_PrivateGetOrderByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateGetOrderByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).PrivateGetOrderByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/PrivateGetOrderByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).PrivateGetOrderByCode(ctx, req.(*PrivateGetOrderByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_PrivateListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).PrivateListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/PrivateListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).PrivateListOrders(ctx, req.(*PrivateListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_PrivateCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateCancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).PrivateCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/PrivateCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).PrivateCancelOrder(ctx, req.(*PrivateCancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_InternalRecordPaymentIPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalRecordPaymentIPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).InternalRecordPaymentIPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/InternalRecordPaymentIPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).InternalRecordPaymentIPN(ctx, req.(*InternalRecordPaymentIPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_InternalGetOrderByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalGetOrderByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).InternalGetOrderByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/InternalGetOrderByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).InternalGetOrderByCode(ctx, req.(*InternalGetOrderByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_InternalListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).InternalListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/InternalListOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).InternalListOrders(ctx, req.(*InternalListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_InternalScheduleOrderCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalScheduleOrderCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).InternalScheduleOrderCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/InternalScheduleOrderCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).InternalScheduleOrderCommand(ctx, req.(*InternalScheduleOrderCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderCapturingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orders.v3.OrderCapturingService",
	HandlerType: (*OrderCapturingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrivateCaptureOrder",
			Handler:    _OrderCapturingService_PrivateCaptureOrder_Handler,
		},
		{
			MethodName: "PrivateChangeCODPayment",
			Handler:    _OrderCapturingService_PrivateChangeCODPayment_Handler,
		},
		{
			MethodName: "PrivateGetOrderByCode",
			Handler:    _OrderCapturingService_PrivateGetOrderByCode_Handler,
		},
		{
			MethodName: "PrivateListOrders",
			Handler:    _OrderCapturingService_PrivateListOrders_Handler,
		},
		{
			MethodName: "PrivateCancelOrder",
			Handler:    _OrderCapturingService_PrivateCancelOrder_Handler,
		},
		{
			MethodName: "InternalRecordPaymentIPN",
			Handler:    _OrderCapturingService_InternalRecordPaymentIPN_Handler,
		},
		{
			MethodName: "InternalGetOrderByCode",
			Handler:    _OrderCapturingService_InternalGetOrderByCode_Handler,
		},
		{
			MethodName: "InternalListOrders",
			Handler:    _OrderCapturingService_InternalListOrders_Handler,
		},
		{
			MethodName: "InternalScheduleOrderCommand",
			Handler:    _OrderCapturingService_InternalScheduleOrderCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orders/v3/capturing_service.proto",
}
