// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderCapturingServiceClient is the client API for OrderCapturingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderCapturingServiceClient interface {
	// CaptureInternalOrder capture order data to create a new order, use for
	// everyone
	CaptureInternalOrder(ctx context.Context, in *CaptureInternalOrderRequest, opts ...grpc.CallOption) (*CaptureInternalOrderResponse, error)
	// CreateInternalOrder create a new order, use for
	// everyone
	CreateInternalOrder(ctx context.Context, in *CreateInternalOrderRequest, opts ...grpc.CallOption) (*CreateInternalOrderResponse, error)
	// ChangeInternalCODPayment update current order to COD payment, for customer
	ChangeInternalCODPayment(ctx context.Context, in *ChangeInternalCODPaymentRequest, opts ...grpc.CallOption) (*ChangeInternalCODPaymentResponse, error)
	// GetInternalOrderByCode get single order by its code, for customer
	GetInternalOrderByCode(ctx context.Context, in *GetInternalOrderByCodeRequest, opts ...grpc.CallOption) (*GetInternalOrderByCodeResponse, error)
	// ListInternalOrders get list of order with filter, for customer
	ListInternalOrders(ctx context.Context, in *ListInternalOrdersRequest, opts ...grpc.CallOption) (*ListInternalOrdersResponse, error)
	// CancelInternalOrder cancel an order, for customer
	CancelInternalOrder(ctx context.Context, in *CancelInternalOrderRequest, opts ...grpc.CallOption) (*CancelInternalOrderResponse, error)
	// RecordInternalPaymentIPN receive payment of an order from Payment Service
	RecordInternalPaymentIPN(ctx context.Context, in *RecordInternalPaymentIPNRequest, opts ...grpc.CallOption) (*RecordInternalPaymentIPNResponse, error)
	// ScheduleInternalOrderCommand queuing an order command for later executing
	ScheduleInternalOrderCommand(ctx context.Context, in *ScheduleInternalOrderCommandRequest, opts ...grpc.CallOption) (*ScheduleInternalOrderCommandResponse, error)
	// CaptureInternalOrderFromCart capture order data to create a new order from
	// cart service
	CaptureInternalOrderFromCart(ctx context.Context, in *CaptureInternalOrderFromCartRequest, opts ...grpc.CallOption) (*CaptureInternalOrderFromCartResponse, error)
	// UpdateInternalShippingInfo update shipping info
	UpdateInternalShippingInfo(ctx context.Context, in *UpdateInternalShippingInfoRequest, opts ...grpc.CallOption) (*UpdateInternalShippingInfoResponse, error)
	// UpdateInternalBillingInfo update billing info
	UpdateInternalBillingInfo(ctx context.Context, in *UpdateInternalBillingInfoRequest, opts ...grpc.CallOption) (*UpdateInternalBillingInfoResponse, error)
}

type orderCapturingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderCapturingServiceClient(cc grpc.ClientConnInterface) OrderCapturingServiceClient {
	return &orderCapturingServiceClient{cc}
}

func (c *orderCapturingServiceClient) CaptureInternalOrder(ctx context.Context, in *CaptureInternalOrderRequest, opts ...grpc.CallOption) (*CaptureInternalOrderResponse, error) {
	out := new(CaptureInternalOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/CaptureInternalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) CreateInternalOrder(ctx context.Context, in *CreateInternalOrderRequest, opts ...grpc.CallOption) (*CreateInternalOrderResponse, error) {
	out := new(CreateInternalOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/CreateInternalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) ChangeInternalCODPayment(ctx context.Context, in *ChangeInternalCODPaymentRequest, opts ...grpc.CallOption) (*ChangeInternalCODPaymentResponse, error) {
	out := new(ChangeInternalCODPaymentResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/ChangeInternalCODPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) GetInternalOrderByCode(ctx context.Context, in *GetInternalOrderByCodeRequest, opts ...grpc.CallOption) (*GetInternalOrderByCodeResponse, error) {
	out := new(GetInternalOrderByCodeResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/GetInternalOrderByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) ListInternalOrders(ctx context.Context, in *ListInternalOrdersRequest, opts ...grpc.CallOption) (*ListInternalOrdersResponse, error) {
	out := new(ListInternalOrdersResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/ListInternalOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) CancelInternalOrder(ctx context.Context, in *CancelInternalOrderRequest, opts ...grpc.CallOption) (*CancelInternalOrderResponse, error) {
	out := new(CancelInternalOrderResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/CancelInternalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) RecordInternalPaymentIPN(ctx context.Context, in *RecordInternalPaymentIPNRequest, opts ...grpc.CallOption) (*RecordInternalPaymentIPNResponse, error) {
	out := new(RecordInternalPaymentIPNResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/RecordInternalPaymentIPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) ScheduleInternalOrderCommand(ctx context.Context, in *ScheduleInternalOrderCommandRequest, opts ...grpc.CallOption) (*ScheduleInternalOrderCommandResponse, error) {
	out := new(ScheduleInternalOrderCommandResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/ScheduleInternalOrderCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) CaptureInternalOrderFromCart(ctx context.Context, in *CaptureInternalOrderFromCartRequest, opts ...grpc.CallOption) (*CaptureInternalOrderFromCartResponse, error) {
	out := new(CaptureInternalOrderFromCartResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/CaptureInternalOrderFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) UpdateInternalShippingInfo(ctx context.Context, in *UpdateInternalShippingInfoRequest, opts ...grpc.CallOption) (*UpdateInternalShippingInfoResponse, error) {
	out := new(UpdateInternalShippingInfoResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/UpdateInternalShippingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderCapturingServiceClient) UpdateInternalBillingInfo(ctx context.Context, in *UpdateInternalBillingInfoRequest, opts ...grpc.CallOption) (*UpdateInternalBillingInfoResponse, error) {
	out := new(UpdateInternalBillingInfoResponse)
	err := c.cc.Invoke(ctx, "/orders.v3.OrderCapturingService/UpdateInternalBillingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderCapturingServiceServer is the server API for OrderCapturingService service.
// All implementations must embed UnimplementedOrderCapturingServiceServer
// for forward compatibility
type OrderCapturingServiceServer interface {
	// CaptureInternalOrder capture order data to create a new order, use for
	// everyone
	CaptureInternalOrder(context.Context, *CaptureInternalOrderRequest) (*CaptureInternalOrderResponse, error)
	// CreateInternalOrder create a new order, use for
	// everyone
	CreateInternalOrder(context.Context, *CreateInternalOrderRequest) (*CreateInternalOrderResponse, error)
	// ChangeInternalCODPayment update current order to COD payment, for customer
	ChangeInternalCODPayment(context.Context, *ChangeInternalCODPaymentRequest) (*ChangeInternalCODPaymentResponse, error)
	// GetInternalOrderByCode get single order by its code, for customer
	GetInternalOrderByCode(context.Context, *GetInternalOrderByCodeRequest) (*GetInternalOrderByCodeResponse, error)
	// ListInternalOrders get list of order with filter, for customer
	ListInternalOrders(context.Context, *ListInternalOrdersRequest) (*ListInternalOrdersResponse, error)
	// CancelInternalOrder cancel an order, for customer
	CancelInternalOrder(context.Context, *CancelInternalOrderRequest) (*CancelInternalOrderResponse, error)
	// RecordInternalPaymentIPN receive payment of an order from Payment Service
	RecordInternalPaymentIPN(context.Context, *RecordInternalPaymentIPNRequest) (*RecordInternalPaymentIPNResponse, error)
	// ScheduleInternalOrderCommand queuing an order command for later executing
	ScheduleInternalOrderCommand(context.Context, *ScheduleInternalOrderCommandRequest) (*ScheduleInternalOrderCommandResponse, error)
	// CaptureInternalOrderFromCart capture order data to create a new order from
	// cart service
	CaptureInternalOrderFromCart(context.Context, *CaptureInternalOrderFromCartRequest) (*CaptureInternalOrderFromCartResponse, error)
	// UpdateInternalShippingInfo update shipping info
	UpdateInternalShippingInfo(context.Context, *UpdateInternalShippingInfoRequest) (*UpdateInternalShippingInfoResponse, error)
	// UpdateInternalBillingInfo update billing info
	UpdateInternalBillingInfo(context.Context, *UpdateInternalBillingInfoRequest) (*UpdateInternalBillingInfoResponse, error)
	mustEmbedUnimplementedOrderCapturingServiceServer()
}

// UnimplementedOrderCapturingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderCapturingServiceServer struct {
}

func (*UnimplementedOrderCapturingServiceServer) CaptureInternalOrder(context.Context, *CaptureInternalOrderRequest) (*CaptureInternalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureInternalOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) CreateInternalOrder(context.Context, *CreateInternalOrderRequest) (*CreateInternalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) ChangeInternalCODPayment(context.Context, *ChangeInternalCODPaymentRequest) (*ChangeInternalCODPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInternalCODPayment not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) GetInternalOrderByCode(context.Context, *GetInternalOrderByCodeRequest) (*GetInternalOrderByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalOrderByCode not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) ListInternalOrders(context.Context, *ListInternalOrdersRequest) (*ListInternalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInternalOrders not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) CancelInternalOrder(context.Context, *CancelInternalOrderRequest) (*CancelInternalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInternalOrder not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) RecordInternalPaymentIPN(context.Context, *RecordInternalPaymentIPNRequest) (*RecordInternalPaymentIPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordInternalPaymentIPN not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) ScheduleInternalOrderCommand(context.Context, *ScheduleInternalOrderCommandRequest) (*ScheduleInternalOrderCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleInternalOrderCommand not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) CaptureInternalOrderFromCart(context.Context, *CaptureInternalOrderFromCartRequest) (*CaptureInternalOrderFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureInternalOrderFromCart not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) UpdateInternalShippingInfo(context.Context, *UpdateInternalShippingInfoRequest) (*UpdateInternalShippingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInternalShippingInfo not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) UpdateInternalBillingInfo(context.Context, *UpdateInternalBillingInfoRequest) (*UpdateInternalBillingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInternalBillingInfo not implemented")
}
func (*UnimplementedOrderCapturingServiceServer) mustEmbedUnimplementedOrderCapturingServiceServer() {
}

func RegisterOrderCapturingServiceServer(s *grpc.Server, srv OrderCapturingServiceServer) {
	s.RegisterService(&_OrderCapturingService_serviceDesc, srv)
}

func _OrderCapturingService_CaptureInternalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureInternalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).CaptureInternalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/CaptureInternalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).CaptureInternalOrder(ctx, req.(*CaptureInternalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_CreateInternalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).CreateInternalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/CreateInternalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).CreateInternalOrder(ctx, req.(*CreateInternalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_ChangeInternalCODPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeInternalCODPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).ChangeInternalCODPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/ChangeInternalCODPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).ChangeInternalCODPayment(ctx, req.(*ChangeInternalCODPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_GetInternalOrderByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalOrderByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).GetInternalOrderByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/GetInternalOrderByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).GetInternalOrderByCode(ctx, req.(*GetInternalOrderByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_ListInternalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInternalOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).ListInternalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/ListInternalOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).ListInternalOrders(ctx, req.(*ListInternalOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_CancelInternalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInternalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).CancelInternalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/CancelInternalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).CancelInternalOrder(ctx, req.(*CancelInternalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_RecordInternalPaymentIPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordInternalPaymentIPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).RecordInternalPaymentIPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/RecordInternalPaymentIPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).RecordInternalPaymentIPN(ctx, req.(*RecordInternalPaymentIPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_ScheduleInternalOrderCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleInternalOrderCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).ScheduleInternalOrderCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/ScheduleInternalOrderCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).ScheduleInternalOrderCommand(ctx, req.(*ScheduleInternalOrderCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_CaptureInternalOrderFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureInternalOrderFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).CaptureInternalOrderFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/CaptureInternalOrderFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).CaptureInternalOrderFromCart(ctx, req.(*CaptureInternalOrderFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_UpdateInternalShippingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInternalShippingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).UpdateInternalShippingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/UpdateInternalShippingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).UpdateInternalShippingInfo(ctx, req.(*UpdateInternalShippingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderCapturingService_UpdateInternalBillingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInternalBillingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderCapturingServiceServer).UpdateInternalBillingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orders.v3.OrderCapturingService/UpdateInternalBillingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderCapturingServiceServer).UpdateInternalBillingInfo(ctx, req.(*UpdateInternalBillingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderCapturingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orders.v3.OrderCapturingService",
	HandlerType: (*OrderCapturingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CaptureInternalOrder",
			Handler:    _OrderCapturingService_CaptureInternalOrder_Handler,
		},
		{
			MethodName: "CreateInternalOrder",
			Handler:    _OrderCapturingService_CreateInternalOrder_Handler,
		},
		{
			MethodName: "ChangeInternalCODPayment",
			Handler:    _OrderCapturingService_ChangeInternalCODPayment_Handler,
		},
		{
			MethodName: "GetInternalOrderByCode",
			Handler:    _OrderCapturingService_GetInternalOrderByCode_Handler,
		},
		{
			MethodName: "ListInternalOrders",
			Handler:    _OrderCapturingService_ListInternalOrders_Handler,
		},
		{
			MethodName: "CancelInternalOrder",
			Handler:    _OrderCapturingService_CancelInternalOrder_Handler,
		},
		{
			MethodName: "RecordInternalPaymentIPN",
			Handler:    _OrderCapturingService_RecordInternalPaymentIPN_Handler,
		},
		{
			MethodName: "ScheduleInternalOrderCommand",
			Handler:    _OrderCapturingService_ScheduleInternalOrderCommand_Handler,
		},
		{
			MethodName: "CaptureInternalOrderFromCart",
			Handler:    _OrderCapturingService_CaptureInternalOrderFromCart_Handler,
		},
		{
			MethodName: "UpdateInternalShippingInfo",
			Handler:    _OrderCapturingService_UpdateInternalShippingInfo_Handler,
		},
		{
			MethodName: "UpdateInternalBillingInfo",
			Handler:    _OrderCapturingService_UpdateInternalBillingInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orders/v3/capturing_service.proto",
}
