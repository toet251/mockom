// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/orders/v3/common.proto

package orders

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DeliveryType specified the way customer want to pick up the order
type DeliveryType int32

const (
	DeliveryType_DELIVERY_TYPE_UNSPECIFIED  DeliveryType = 0
	DeliveryType_DELIVERY_TYPE_PICKUP_NOW   DeliveryType = 1
	DeliveryType_DELIVERY_TYPE_TO_HOME      DeliveryType = 2
	DeliveryType_DELIVERY_TYPE_PICKUP_LATER DeliveryType = 3
)

var DeliveryType_name = map[int32]string{
	0: "DELIVERY_TYPE_UNSPECIFIED",
	1: "DELIVERY_TYPE_PICKUP_NOW",
	2: "DELIVERY_TYPE_TO_HOME",
	3: "DELIVERY_TYPE_PICKUP_LATER",
}

var DeliveryType_value = map[string]int32{
	"DELIVERY_TYPE_UNSPECIFIED":  0,
	"DELIVERY_TYPE_PICKUP_NOW":   1,
	"DELIVERY_TYPE_TO_HOME":      2,
	"DELIVERY_TYPE_PICKUP_LATER": 3,
}

func (x DeliveryType) String() string {
	return proto.EnumName(DeliveryType_name, int32(x))
}

func (DeliveryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{0}
}

// ItemType
type ItemType int32

const (
	ItemType_ITEM_TYPE_UNSPECIFIED ItemType = 0
	ItemType_ITEM_TYPE_PRODUCT     ItemType = 1
	ItemType_ITEM_TYPE_SERVICE     ItemType = 2
)

var ItemType_name = map[int32]string{
	0: "ITEM_TYPE_UNSPECIFIED",
	1: "ITEM_TYPE_PRODUCT",
	2: "ITEM_TYPE_SERVICE",
}

var ItemType_value = map[string]int32{
	"ITEM_TYPE_UNSPECIFIED": 0,
	"ITEM_TYPE_PRODUCT":     1,
	"ITEM_TYPE_SERVICE":     2,
}

func (x ItemType) String() string {
	return proto.EnumName(ItemType_name, int32(x))
}

func (ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{1}
}

// TaxType type of tax in billing (normal, tax free, tax refund)
type TaxType int32

const (
	TaxType_TAX_TYPE_UNSPECIFIED TaxType = 0
	TaxType_TAX_TYPE_NORMAL      TaxType = 1
)

var TaxType_name = map[int32]string{
	0: "TAX_TYPE_UNSPECIFIED",
	1: "TAX_TYPE_NORMAL",
}

var TaxType_value = map[string]int32{
	"TAX_TYPE_UNSPECIFIED": 0,
	"TAX_TYPE_NORMAL":      1,
}

func (x TaxType) String() string {
	return proto.EnumName(TaxType_name, int32(x))
}

func (TaxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{2}
}

// PromotionType type of promotion
type PromotionType int32

const (
	PromotionType_PROMOTION_TYPE_UNSPECIFIED PromotionType = 0
	PromotionType_PROMOTION_TYPE_PROMOTION   PromotionType = 1
	PromotionType_PROMOTION_TYPE_FLASH_SALE  PromotionType = 2
	PromotionType_PROMOTION_TYPE_EXTRA       PromotionType = 3
)

var PromotionType_name = map[int32]string{
	0: "PROMOTION_TYPE_UNSPECIFIED",
	1: "PROMOTION_TYPE_PROMOTION",
	2: "PROMOTION_TYPE_FLASH_SALE",
	3: "PROMOTION_TYPE_EXTRA",
}

var PromotionType_value = map[string]int32{
	"PROMOTION_TYPE_UNSPECIFIED": 0,
	"PROMOTION_TYPE_PROMOTION":   1,
	"PROMOTION_TYPE_FLASH_SALE":  2,
	"PROMOTION_TYPE_EXTRA":       3,
}

func (x PromotionType) String() string {
	return proto.EnumName(PromotionType_name, int32(x))
}

func (PromotionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{3}
}

// PromotionApplyType ...
type PromotionApplyType int32

const (
	PromotionApplyType_PROMOTION_APPLY_TYPE_UNSPECIFIED PromotionApplyType = 0
	PromotionApplyType_PROMOTION_APPLY_TYPE_PRODUCT     PromotionApplyType = 1
	PromotionApplyType_PROMOTION_APPLY_TYPE_BUNDLE      PromotionApplyType = 2
	PromotionApplyType_PROMOTION_APPLY_TYPE_PART_ORDER  PromotionApplyType = 3
	PromotionApplyType_PROMOTION_APPLY_TYPE_ORDER       PromotionApplyType = 4
)

var PromotionApplyType_name = map[int32]string{
	0: "PROMOTION_APPLY_TYPE_UNSPECIFIED",
	1: "PROMOTION_APPLY_TYPE_PRODUCT",
	2: "PROMOTION_APPLY_TYPE_BUNDLE",
	3: "PROMOTION_APPLY_TYPE_PART_ORDER",
	4: "PROMOTION_APPLY_TYPE_ORDER",
}

var PromotionApplyType_value = map[string]int32{
	"PROMOTION_APPLY_TYPE_UNSPECIFIED": 0,
	"PROMOTION_APPLY_TYPE_PRODUCT":     1,
	"PROMOTION_APPLY_TYPE_BUNDLE":      2,
	"PROMOTION_APPLY_TYPE_PART_ORDER":  3,
	"PROMOTION_APPLY_TYPE_ORDER":       4,
}

func (x PromotionApplyType) String() string {
	return proto.EnumName(PromotionApplyType_name, int32(x))
}

func (PromotionApplyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{4}
}

// CommandType specified what command can be done to order
type CommandType int32

const (
	CommandType_COMMAND_TYPE_UNSPECIFIED   CommandType = 0
	CommandType_COMMAND_TYPE_AUTOCANCEL_V2 CommandType = 1
)

var CommandType_name = map[int32]string{
	0: "COMMAND_TYPE_UNSPECIFIED",
	1: "COMMAND_TYPE_AUTOCANCEL_V2",
}

var CommandType_value = map[string]int32{
	"COMMAND_TYPE_UNSPECIFIED":   0,
	"COMMAND_TYPE_AUTOCANCEL_V2": 1,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{5}
}

// Customer Schema
type Customer struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Phone                string   `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{0}
}
func (m *Customer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(m, src)
}
func (m *Customer) XXX_Size() int {
	return m.Size()
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

// Item Schema
type Item struct {
	LineItemId string `protobuf:"bytes,1,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	Sku        string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
	// quantity: can be discontinuity unit (eg: 1 or 2 unit) or continuity
	// (eg: 12.34 kg, 0.01 liter)
	Quantity float64 `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// type: is this item product or service
	Type ItemType `protobuf:"varint,4,opt,name=type,proto3,enum=orders.v3.ItemType" json:"type,omitempty"`
	// unit_price: price per unit after tax
	UnitPrice uint64 `protobuf:"varint,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	// seller_id: seller of this item
	SellerId uint32 `protobuf:"varint,6,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	// bundle_id is a reference to cluster multiple items to apply promotion on.
	// using when promotion apply on bundles.
	BundleId             string   `protobuf:"bytes,7,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{1}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetLineItemId() string {
	if m != nil {
		return m.LineItemId
	}
	return ""
}

func (m *Item) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *Item) GetQuantity() float64 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Item) GetType() ItemType {
	if m != nil {
		return m.Type
	}
	return ItemType_ITEM_TYPE_UNSPECIFIED
}

func (m *Item) GetUnitPrice() uint64 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *Item) GetSellerId() uint32 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *Item) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

// BillingInfo Schema
type BillingInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Email   string `protobuf:"bytes,3,opt,name=email,json=receiverEmail,proto3" json:"email,omitempty"`
	// tax_id_number: the Taxpayer Identification Number
	TaxIdNumber          string   `protobuf:"bytes,4,opt,name=tax_id_number,json=taxIdNumber,proto3" json:"tax_id_number,omitempty"`
	Phone                string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Type                 TaxType  `protobuf:"varint,6,opt,name=type,proto3,enum=orders.v3.TaxType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BillingInfo) Reset()         { *m = BillingInfo{} }
func (m *BillingInfo) String() string { return proto.CompactTextString(m) }
func (*BillingInfo) ProtoMessage()    {}
func (*BillingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{2}
}
func (m *BillingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingInfo.Merge(m, src)
}
func (m *BillingInfo) XXX_Size() int {
	return m.Size()
}
func (m *BillingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BillingInfo proto.InternalMessageInfo

func (m *BillingInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BillingInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BillingInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *BillingInfo) GetTaxIdNumber() string {
	if m != nil {
		return m.TaxIdNumber
	}
	return ""
}

func (m *BillingInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *BillingInfo) GetType() TaxType {
	if m != nil {
		return m.Type
	}
	return TaxType_TAX_TYPE_UNSPECIFIED
}

// ShippingInfo Schema
type ShippingInfo struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Phone         string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	StreetAddress string `protobuf:"bytes,4,opt,name=street_address,json=address,proto3" json:"street_address,omitempty"`
	AddressCode   string `protobuf:"bytes,5,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`
	Note          string `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	// expected_date: a timestamp this order be expected to be delivered by
	ExpectedDate         uint64   `protobuf:"varint,7,opt,name=expected_date,json=expectedDate,proto3" json:"expected_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShippingInfo) Reset()         { *m = ShippingInfo{} }
func (m *ShippingInfo) String() string { return proto.CompactTextString(m) }
func (*ShippingInfo) ProtoMessage()    {}
func (*ShippingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{3}
}
func (m *ShippingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShippingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShippingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShippingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShippingInfo.Merge(m, src)
}
func (m *ShippingInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShippingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShippingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShippingInfo proto.InternalMessageInfo

func (m *ShippingInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ShippingInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *ShippingInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ShippingInfo) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *ShippingInfo) GetAddressCode() string {
	if m != nil {
		return m.AddressCode
	}
	return ""
}

func (m *ShippingInfo) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *ShippingInfo) GetExpectedDate() uint64 {
	if m != nil {
		return m.ExpectedDate
	}
	return 0
}

// PaymentDetail genernal payment for get order detail
type PaymentDetail struct {
	TransactionCode string `protobuf:"bytes,1,opt,name=transaction_code,json=transactionCode,proto3" json:"transaction_code,omitempty"`
	// payment_type: string represent of current payment method
	PaymentType          string   `protobuf:"bytes,2,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	Amount               uint64   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentDetail) Reset()         { *m = PaymentDetail{} }
func (m *PaymentDetail) String() string { return proto.CompactTextString(m) }
func (*PaymentDetail) ProtoMessage()    {}
func (*PaymentDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{4}
}
func (m *PaymentDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentDetail.Merge(m, src)
}
func (m *PaymentDetail) XXX_Size() int {
	return m.Size()
}
func (m *PaymentDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentDetail proto.InternalMessageInfo

func (m *PaymentDetail) GetTransactionCode() string {
	if m != nil {
		return m.TransactionCode
	}
	return ""
}

func (m *PaymentDetail) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *PaymentDetail) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// PromotionApplyOn Schema
type PromotionApplyOn struct {
	// line_item_id: reference to line item that promotion apply to
	LineItemId string `protobuf:"bytes,1,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	// quanity: number of item in line-item-id is applied
	Quantity             uint32   `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromotionApplyOn) Reset()         { *m = PromotionApplyOn{} }
func (m *PromotionApplyOn) String() string { return proto.CompactTextString(m) }
func (*PromotionApplyOn) ProtoMessage()    {}
func (*PromotionApplyOn) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{5}
}
func (m *PromotionApplyOn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionApplyOn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionApplyOn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionApplyOn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionApplyOn.Merge(m, src)
}
func (m *PromotionApplyOn) XXX_Size() int {
	return m.Size()
}
func (m *PromotionApplyOn) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionApplyOn.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionApplyOn proto.InternalMessageInfo

func (m *PromotionApplyOn) GetLineItemId() string {
	if m != nil {
		return m.LineItemId
	}
	return ""
}

func (m *PromotionApplyOn) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// PromotionGift Schema
type PromotionGift struct {
	// line_item_id: reference to line item that is gift of this promotion
	LineItemId string `protobuf:"bytes,1,opt,name=line_item_id,json=lineItemId,proto3" json:"line_item_id,omitempty"`
	// sku: stored to avoid the need to lookup back in `items` block
	Sku string `protobuf:"bytes,2,opt,name=sku,proto3" json:"sku,omitempty"`
	// quantity: number of this gifts  in line-item-id is gift
	Quantity             uint32   `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromotionGift) Reset()         { *m = PromotionGift{} }
func (m *PromotionGift) String() string { return proto.CompactTextString(m) }
func (*PromotionGift) ProtoMessage()    {}
func (*PromotionGift) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{6}
}
func (m *PromotionGift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionGift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionGift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionGift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionGift.Merge(m, src)
}
func (m *PromotionGift) XXX_Size() int {
	return m.Size()
}
func (m *PromotionGift) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionGift.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionGift proto.InternalMessageInfo

func (m *PromotionGift) GetLineItemId() string {
	if m != nil {
		return m.LineItemId
	}
	return ""
}

func (m *PromotionGift) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *PromotionGift) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// PromotionVoucher Schema
type PromotionVoucher struct {
	// quantity: number of voucher will be rewarded to customer
	Quantity             uint32   `protobuf:"varint,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromotionVoucher) Reset()         { *m = PromotionVoucher{} }
func (m *PromotionVoucher) String() string { return proto.CompactTextString(m) }
func (*PromotionVoucher) ProtoMessage()    {}
func (*PromotionVoucher) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{7}
}
func (m *PromotionVoucher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromotionVoucher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromotionVoucher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromotionVoucher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromotionVoucher.Merge(m, src)
}
func (m *PromotionVoucher) XXX_Size() int {
	return m.Size()
}
func (m *PromotionVoucher) XXX_DiscardUnknown() {
	xxx_messageInfo_PromotionVoucher.DiscardUnknown(m)
}

var xxx_messageInfo_PromotionVoucher proto.InternalMessageInfo

func (m *PromotionVoucher) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

// Promotion Schema
type Promotion struct {
	// promotion_id: identity of promotion. difference promotion type can have
	// same id
	PromotionId int32 `protobuf:"varint,2,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`
	// type: promotion type
	Type PromotionType `protobuf:"varint,3,opt,name=type,proto3,enum=orders.v3.PromotionType" json:"type,omitempty"`
	// apply_type: scope of this promotion (per item, full order, bundle)
	ApplyType PromotionApplyType `protobuf:"varint,4,opt,name=apply_type,json=applyType,proto3,enum=orders.v3.PromotionApplyType" json:"apply_type,omitempty"`
	// apply_on: specific affect line item id. empty when `apply_type=order`
	ApplyOn []*PromotionApplyOn `protobuf:"bytes,5,rep,name=apply_on,json=applyOn,proto3" json:"apply_on,omitempty"`
	// discount_amount: the total money value of this promotion
	DiscountAmount int64 `protobuf:"varint,6,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// gifts: list of gifts in this promotions
	Gifts []*PromotionGift `protobuf:"bytes,7,rep,name=gifts,proto3" json:"gifts,omitempty"`
	// apply_count: the number of time [...]
	ApplyCount uint32 `protobuf:"varint,8,opt,name=apply_count,json=applyCount,proto3" json:"apply_count,omitempty"`
	// voucher: number of vocher will be rewarded to customer (to be rename by
	// PPM)
	Voucher *PromotionVoucher `protobuf:"bytes,9,opt,name=voucher,proto3" json:"voucher,omitempty"`
	// coupon: the coupon code apply in this promotion
	Coupon string `protobuf:"bytes,10,opt,name=coupon,proto3" json:"coupon,omitempty"`
	// seller_id: seller of this promotion
	SellerId             uint32   `protobuf:"varint,11,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Promotion) Reset()         { *m = Promotion{} }
func (m *Promotion) String() string { return proto.CompactTextString(m) }
func (*Promotion) ProtoMessage()    {}
func (*Promotion) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{8}
}
func (m *Promotion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Promotion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Promotion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Promotion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Promotion.Merge(m, src)
}
func (m *Promotion) XXX_Size() int {
	return m.Size()
}
func (m *Promotion) XXX_DiscardUnknown() {
	xxx_messageInfo_Promotion.DiscardUnknown(m)
}

var xxx_messageInfo_Promotion proto.InternalMessageInfo

func (m *Promotion) GetPromotionId() int32 {
	if m != nil {
		return m.PromotionId
	}
	return 0
}

func (m *Promotion) GetType() PromotionType {
	if m != nil {
		return m.Type
	}
	return PromotionType_PROMOTION_TYPE_UNSPECIFIED
}

func (m *Promotion) GetApplyType() PromotionApplyType {
	if m != nil {
		return m.ApplyType
	}
	return PromotionApplyType_PROMOTION_APPLY_TYPE_UNSPECIFIED
}

func (m *Promotion) GetApplyOn() []*PromotionApplyOn {
	if m != nil {
		return m.ApplyOn
	}
	return nil
}

func (m *Promotion) GetDiscountAmount() int64 {
	if m != nil {
		return m.DiscountAmount
	}
	return 0
}

func (m *Promotion) GetGifts() []*PromotionGift {
	if m != nil {
		return m.Gifts
	}
	return nil
}

func (m *Promotion) GetApplyCount() uint32 {
	if m != nil {
		return m.ApplyCount
	}
	return 0
}

func (m *Promotion) GetVoucher() *PromotionVoucher {
	if m != nil {
		return m.Voucher
	}
	return nil
}

func (m *Promotion) GetCoupon() string {
	if m != nil {
		return m.Coupon
	}
	return ""
}

func (m *Promotion) GetSellerId() uint32 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

// SimplifiedOrder store a reduced data of full order
type SimplifiedOrder struct {
	Id                   uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer             *Customer        `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Items                []*Item          `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Notes                string           `protobuf:"bytes,4,opt,name=notes,json=note,proto3" json:"notes,omitempty"`
	ShippingInfo         *ShippingInfo    `protobuf:"bytes,5,opt,name=shipping_info,json=shippingInfo,proto3" json:"shipping_info,omitempty"`
	GrandTotal           uint64           `protobuf:"varint,6,opt,name=grand_total,json=grandTotal,proto3" json:"grand_total,omitempty"`
	ReferralCode         string           `protobuf:"bytes,7,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty"`
	ClientOrderId        string           `protobuf:"bytes,8,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	TerminalId           string           `protobuf:"bytes,9,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	Payments             []*PaymentDetail `protobuf:"bytes,10,rep,name=payments,proto3" json:"payments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SimplifiedOrder) Reset()         { *m = SimplifiedOrder{} }
func (m *SimplifiedOrder) String() string { return proto.CompactTextString(m) }
func (*SimplifiedOrder) ProtoMessage()    {}
func (*SimplifiedOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_848137394fdd8083, []int{9}
}
func (m *SimplifiedOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimplifiedOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimplifiedOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimplifiedOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimplifiedOrder.Merge(m, src)
}
func (m *SimplifiedOrder) XXX_Size() int {
	return m.Size()
}
func (m *SimplifiedOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SimplifiedOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SimplifiedOrder proto.InternalMessageInfo

func (m *SimplifiedOrder) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SimplifiedOrder) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *SimplifiedOrder) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SimplifiedOrder) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *SimplifiedOrder) GetShippingInfo() *ShippingInfo {
	if m != nil {
		return m.ShippingInfo
	}
	return nil
}

func (m *SimplifiedOrder) GetGrandTotal() uint64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *SimplifiedOrder) GetReferralCode() string {
	if m != nil {
		return m.ReferralCode
	}
	return ""
}

func (m *SimplifiedOrder) GetClientOrderId() string {
	if m != nil {
		return m.ClientOrderId
	}
	return ""
}

func (m *SimplifiedOrder) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *SimplifiedOrder) GetPayments() []*PaymentDetail {
	if m != nil {
		return m.Payments
	}
	return nil
}

func init() {
	proto.RegisterEnum("orders.v3.DeliveryType", DeliveryType_name, DeliveryType_value)
	proto.RegisterEnum("orders.v3.ItemType", ItemType_name, ItemType_value)
	proto.RegisterEnum("orders.v3.TaxType", TaxType_name, TaxType_value)
	proto.RegisterEnum("orders.v3.PromotionType", PromotionType_name, PromotionType_value)
	proto.RegisterEnum("orders.v3.PromotionApplyType", PromotionApplyType_name, PromotionApplyType_value)
	proto.RegisterEnum("orders.v3.CommandType", CommandType_name, CommandType_value)
	proto.RegisterType((*Customer)(nil), "orders.v3.Customer")
	proto.RegisterType((*Item)(nil), "orders.v3.Item")
	proto.RegisterType((*BillingInfo)(nil), "orders.v3.BillingInfo")
	proto.RegisterType((*ShippingInfo)(nil), "orders.v3.ShippingInfo")
	proto.RegisterType((*PaymentDetail)(nil), "orders.v3.PaymentDetail")
	proto.RegisterType((*PromotionApplyOn)(nil), "orders.v3.PromotionApplyOn")
	proto.RegisterType((*PromotionGift)(nil), "orders.v3.PromotionGift")
	proto.RegisterType((*PromotionVoucher)(nil), "orders.v3.PromotionVoucher")
	proto.RegisterType((*Promotion)(nil), "orders.v3.Promotion")
	proto.RegisterType((*SimplifiedOrder)(nil), "orders.v3.SimplifiedOrder")
}

func init() { proto.RegisterFile("proto/orders/v3/common.proto", fileDescriptor_848137394fdd8083) }

var fileDescriptor_848137394fdd8083 = []byte{
	// 1341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4b, 0x73, 0xdb, 0x54,
	0x14, 0xce, 0xb5, 0xe5, 0xd8, 0x3e, 0xb6, 0x13, 0x71, 0xdb, 0x52, 0x35, 0x4f, 0xe3, 0x16, 0x1a,
	0x52, 0xea, 0xcc, 0x24, 0xc0, 0x74, 0xc1, 0xc6, 0xaf, 0x52, 0x4d, 0x1d, 0xcb, 0x73, 0xed, 0x84,
	0x96, 0x8d, 0xaa, 0x4a, 0xd7, 0xad, 0xa6, 0x7a, 0x55, 0x92, 0x33, 0xc9, 0x86, 0x45, 0x99, 0x61,
	0xcf, 0x8e, 0xdf, 0xc3, 0x8a, 0x25, 0x3f, 0x81, 0x29, 0x7f, 0x81, 0x55, 0x16, 0xc0, 0xdc, 0x2b,
	0xc9, 0x91, 0x5c, 0x65, 0x06, 0x76, 0xd2, 0x77, 0x8e, 0xce, 0xe3, 0x3b, 0xe7, 0x7e, 0x57, 0xb0,
	0xe5, 0xf9, 0x6e, 0xe8, 0x1e, 0xb8, 0xbe, 0x41, 0xfd, 0xe0, 0xe0, 0xec, 0xe8, 0x40, 0x77, 0x6d,
	0xdb, 0x75, 0xda, 0x1c, 0xc6, 0xd5, 0x08, 0x6f, 0x9f, 0x1d, 0x6d, 0xdc, 0x3e, 0xd3, 0x2c, 0xd3,
	0xd0, 0x42, 0x7a, 0x90, 0x3c, 0x44, 0x3e, 0xad, 0x19, 0x54, 0x7a, 0xf3, 0x20, 0x74, 0x6d, 0xea,
	0xe3, 0x2d, 0x10, 0x1c, 0xcd, 0xa6, 0x12, 0x6a, 0xa2, 0xbd, 0x6a, 0xb7, 0x72, 0xd9, 0x2d, 0xf9,
	0x45, 0xe9, 0x1f, 0x44, 0x38, 0x8a, 0xb7, 0xa1, 0x44, 0x6d, 0xcd, 0xb4, 0xa4, 0x02, 0x37, 0x97,
	0x2f, 0xbb, 0x82, 0x5f, 0x78, 0x81, 0x48, 0x84, 0x32, 0xb3, 0xf7, 0xda, 0x75, 0xa8, 0x54, 0x4c,
	0x99, 0xa5, 0x75, 0x12, 0xa1, 0xad, 0x1f, 0x0b, 0x20, 0xc8, 0x21, 0xb5, 0xf1, 0x03, 0xa8, 0x5b,
	0xa6, 0x43, 0x55, 0x33, 0xa4, 0xb6, 0x6a, 0x1a, 0x71, 0xb2, 0xea, 0x65, 0x77, 0xd5, 0x17, 0x44,
	0x24, 0x1d, 0x12, 0x60, 0x66, 0xe6, 0x2a, 0x1b, 0x78, 0x13, 0x8a, 0xc1, 0x9b, 0x79, 0x9c, 0x31,
	0xe5, 0xc3, 0x50, 0xbc, 0x01, 0x95, 0xb7, 0x73, 0xcd, 0x09, 0xcd, 0xf0, 0x82, 0x27, 0x45, 0x64,
	0xf1, 0x8e, 0x8f, 0x40, 0x08, 0x2f, 0x3c, 0x2a, 0x09, 0x4d, 0xb4, 0xb7, 0x76, 0x78, 0xa3, 0xbd,
	0x60, 0xa2, 0xcd, 0x22, 0x4f, 0x2f, 0x3c, 0xda, 0x85, 0xcb, 0x6e, 0xf9, 0x1d, 0x12, 0x44, 0xd4,
	0x5c, 0x21, 0xdc, 0x19, 0x6f, 0x03, 0xcc, 0x1d, 0x33, 0x54, 0x3d, 0xdf, 0xd4, 0xa9, 0x54, 0x6a,
	0xa2, 0x3d, 0x81, 0x54, 0x19, 0x32, 0x66, 0x00, 0xbe, 0x07, 0xd5, 0x80, 0x5a, 0x16, 0xf5, 0x59,
	0xd9, 0xab, 0x4d, 0xb4, 0xd7, 0xe0, 0x5d, 0xee, 0x17, 0x9a, 0x2b, 0xa4, 0x12, 0x59, 0x78, 0xc9,
	0xd5, 0x97, 0x73, 0xc7, 0xb0, 0x28, 0xf3, 0x2a, 0xb3, 0xc2, 0x49, 0x25, 0x02, 0x64, 0xa3, 0xf5,
	0x37, 0x82, 0x5a, 0xd7, 0xb4, 0x2c, 0xd3, 0x79, 0x25, 0x3b, 0x33, 0x17, 0xef, 0x64, 0x18, 0x67,
	0x15, 0xf9, 0x25, 0x11, 0x5d, 0x71, 0x7e, 0x0f, 0xca, 0x9a, 0x61, 0xf8, 0x34, 0x08, 0x62, 0x0e,
	0xd2, 0x2e, 0x89, 0x09, 0xdf, 0x4f, 0x26, 0x53, 0xcc, 0xf0, 0xf4, 0x02, 0x91, 0x86, 0x4f, 0x75,
	0x6a, 0x9e, 0x51, 0x7f, 0xc0, 0x67, 0xf4, 0x10, 0x1a, 0xa1, 0x76, 0xae, 0x9a, 0x86, 0xea, 0xcc,
	0xed, 0x97, 0xd4, 0xe7, 0xf4, 0x64, 0x88, 0xad, 0x85, 0xda, 0xb9, 0x6c, 0x8c, 0xb8, 0xf5, 0x6a,
	0xa4, 0xa5, 0xbc, 0x91, 0xe2, 0xc3, 0x98, 0xe3, 0x55, 0xce, 0x31, 0x4e, 0x71, 0x3c, 0xd5, 0xce,
	0xf3, 0x29, 0x6e, 0xbd, 0x2b, 0x40, 0x7d, 0xf2, 0xda, 0xf4, 0xbc, 0xff, 0xca, 0xc0, 0x6e, 0x52,
	0xc3, 0xd2, 0x0e, 0x2c, 0xaa, 0xd8, 0xce, 0x36, 0xbf, 0xbc, 0x96, 0x0f, 0x60, 0x2d, 0x08, 0x7d,
	0x4a, 0x43, 0x35, 0x21, 0x52, 0xb8, 0x9e, 0xc8, 0x2f, 0xa0, 0x1e, 0x3f, 0xaa, 0xba, 0x6b, 0x24,
	0x7d, 0x2f, 0x72, 0xae, 0x92, 0x5a, 0x6c, 0xee, 0xb9, 0x06, 0xc5, 0x18, 0x04, 0xc7, 0x0d, 0xa3,
	0xfe, 0xab, 0x84, 0x3f, 0xe3, 0xbb, 0xd0, 0xa0, 0xe7, 0x1e, 0xd5, 0x43, 0x6a, 0xa8, 0xec, 0x94,
	0xf1, 0x0d, 0x10, 0x48, 0x3d, 0x01, 0xfb, 0x5a, 0x48, 0x5b, 0x3f, 0x40, 0x63, 0xac, 0x5d, 0xd8,
	0xd4, 0x09, 0xfb, 0x34, 0x64, 0x45, 0x1e, 0x82, 0x18, 0xfa, 0x9a, 0x13, 0x68, 0x7a, 0x68, 0xba,
	0x4e, 0x94, 0x1b, 0xa5, 0xda, 0x11, 0x11, 0x59, 0x4f, 0x39, 0xf0, 0xec, 0x9f, 0x40, 0xdd, 0x8b,
	0x82, 0xa8, 0x7c, 0x0a, 0x9c, 0x1f, 0x52, 0x8b, 0x31, 0x46, 0x3f, 0xfe, 0x18, 0x56, 0x35, 0xdb,
	0x9d, 0x3b, 0x21, 0xe7, 0x46, 0x20, 0xf1, 0x5b, 0xeb, 0x39, 0x88, 0x63, 0xdf, 0xb5, 0x5d, 0x16,
	0xab, 0xe3, 0x79, 0xd6, 0x85, 0xe2, 0xe0, 0xcf, 0x73, 0x8f, 0x65, 0x3c, 0xf2, 0xec, 0xa1, 0x4c,
	0x9f, 0x3b, 0x96, 0xb5, 0x71, 0x75, 0xee, 0x5a, 0x6f, 0xa1, 0xb1, 0x08, 0xfd, 0xad, 0x39, 0x0b,
	0xff, 0x4f, 0xdc, 0x3b, 0xe9, 0xc3, 0xbe, 0xf0, 0xc8, 0x3d, 0xea, 0xe9, 0x94, 0xed, 0x54, 0x37,
	0xa7, 0xee, 0x5c, 0x7f, 0x4d, 0xfd, 0x8c, 0x3f, 0x5a, 0xf2, 0xff, 0xab, 0x08, 0xd5, 0xc5, 0x07,
	0x78, 0x1f, 0xea, 0x5e, 0xf2, 0xc2, 0xea, 0x63, 0xd9, 0x4b, 0x3c, 0xfb, 0x46, 0xa1, 0x89, 0x48,
	0x6d, 0x61, 0x94, 0x0d, 0xfc, 0x28, 0x5e, 0xf8, 0x22, 0x5f, 0x78, 0x29, 0xb5, 0xf0, 0x8b, 0x78,
	0xd7, 0x28, 0xcb, 0x13, 0x00, 0x8d, 0x11, 0xad, 0xa6, 0x44, 0x69, 0x3b, 0xef, 0x7b, 0x3e, 0x8e,
	0x0f, 0x82, 0x54, 0xb5, 0x04, 0xc6, 0x5f, 0x43, 0x25, 0x8a, 0xe4, 0x3a, 0x52, 0xa9, 0x59, 0xdc,
	0xab, 0x1d, 0x6e, 0x5e, 0x1b, 0x47, 0x71, 0x48, 0x59, 0x8b, 0xe7, 0x7b, 0x1f, 0xd6, 0x0d, 0x33,
	0xd0, 0xd9, 0xfc, 0xd5, 0x78, 0x29, 0xd8, 0xde, 0x16, 0xc9, 0x5a, 0x02, 0x77, 0x38, 0x8a, 0xdb,
	0x50, 0x7a, 0x65, 0xce, 0xc2, 0x40, 0x2a, 0xf3, 0xe8, 0xb9, 0x5d, 0xb2, 0xc9, 0x92, 0xc8, 0x0d,
	0xef, 0x41, 0x2d, 0x2a, 0x88, 0x07, 0x91, 0x2a, 0x59, 0x5d, 0x8c, 0xda, 0xee, 0xf1, 0xc8, 0x5f,
	0x41, 0xf9, 0x2c, 0x9a, 0x8f, 0x54, 0x6d, 0xa2, 0xeb, 0x2a, 0x8f, 0x47, 0x48, 0x12, 0x5f, 0xbc,
	0x0b, 0xab, 0xba, 0x3b, 0xf7, 0x5c, 0x47, 0x82, 0xec, 0x66, 0xc4, 0x70, 0x56, 0x97, 0x6b, 0xd7,
	0xe8, 0x72, 0xeb, 0xe7, 0x22, 0xac, 0x4f, 0x4c, 0xdb, 0xb3, 0xcc, 0x99, 0x49, 0x0d, 0x85, 0x25,
	0xc6, 0x6b, 0x50, 0x88, 0x57, 0x52, 0x20, 0x05, 0xd3, 0xc0, 0x07, 0x50, 0xd1, 0xe3, 0xcb, 0x90,
	0x2f, 0x42, 0x2d, 0x73, 0x73, 0x24, 0xf7, 0x24, 0x59, 0x38, 0xe1, 0x4f, 0xa1, 0xc4, 0x16, 0x3b,
	0x90, 0x8a, 0x9c, 0xac, 0xf5, 0xa5, 0x7b, 0x86, 0x44, 0x56, 0x7c, 0x03, 0x4a, 0x4c, 0x1d, 0x62,
	0xed, 0x89, 0xa5, 0xe2, 0x1b, 0x68, 0x04, 0xb1, 0x12, 0xaa, 0xa6, 0x33, 0x73, 0xb9, 0xda, 0xd4,
	0x0e, 0x6f, 0xa7, 0x62, 0xa4, 0x95, 0x92, 0xd4, 0x83, 0xb4, 0x6e, 0xee, 0x42, 0xed, 0x95, 0xaf,
	0x39, 0x86, 0x1a, 0xba, 0xa1, 0x66, 0xf1, 0x59, 0x0a, 0x04, 0x38, 0x34, 0x65, 0x08, 0x53, 0x22,
	0x9f, 0xce, 0xa8, 0xef, 0x6b, 0x56, 0x24, 0x28, 0xd1, 0x5d, 0x54, 0x4f, 0x40, 0x2e, 0x22, 0x9f,
	0xc1, 0xba, 0x6e, 0x99, 0x4c, 0x43, 0x78, 0x52, 0x46, 0x60, 0x85, 0xbb, 0x35, 0x22, 0x98, 0xd3,
	0x24, 0x1b, 0x2c, 0x5b, 0x48, 0x7d, 0xdb, 0x74, 0x34, 0x8b, 0xf9, 0x54, 0xb9, 0x0f, 0x24, 0x90,
	0x6c, 0xe0, 0x2f, 0xa1, 0x12, 0x2b, 0x4f, 0x20, 0xc1, 0x87, 0x8b, 0x93, 0x56, 0x3b, 0xb2, 0xf0,
	0xdc, 0xff, 0x09, 0x41, 0xbd, 0x4f, 0x2d, 0x76, 0x41, 0x45, 0xdb, 0xbd, 0x0d, 0x77, 0xfa, 0x83,
	0xa1, 0x7c, 0x3a, 0x20, 0xcf, 0xd5, 0xe9, 0xf3, 0xf1, 0x40, 0x3d, 0x19, 0x4d, 0xc6, 0x83, 0x9e,
	0xfc, 0x58, 0x1e, 0xf4, 0xc5, 0x15, 0xbc, 0x05, 0x52, 0xd6, 0x3c, 0x96, 0x7b, 0x4f, 0x4f, 0xc6,
	0xea, 0x48, 0xf9, 0x4e, 0x44, 0xf8, 0x0e, 0xdc, 0xca, 0x5a, 0xa7, 0x8a, 0xfa, 0x44, 0x39, 0x1e,
	0x88, 0x05, 0xbc, 0x03, 0x1b, 0xb9, 0x1f, 0x0e, 0x3b, 0xd3, 0x01, 0x11, 0x8b, 0xfb, 0x13, 0xa8,
	0x24, 0xff, 0x05, 0x2c, 0x8c, 0x3c, 0x1d, 0x1c, 0xe7, 0xe5, 0xbf, 0x05, 0x1f, 0x5d, 0x99, 0xc6,
	0x44, 0xe9, 0x9f, 0xf4, 0xa6, 0x22, 0xca, 0xc2, 0x93, 0x01, 0x39, 0x95, 0x7b, 0x03, 0xb1, 0xb0,
	0xff, 0x08, 0xca, 0xf1, 0x45, 0x88, 0x25, 0xb8, 0x39, 0xed, 0x3c, 0xcb, 0x0b, 0x79, 0x03, 0xd6,
	0x17, 0x96, 0x91, 0x42, 0x8e, 0x3b, 0x43, 0x11, 0x31, 0x5e, 0x1a, 0x19, 0x49, 0x61, 0x0d, 0x8c,
	0x89, 0x72, 0xac, 0x4c, 0x65, 0x65, 0x74, 0x0d, 0x33, 0x4b, 0xf6, 0xc5, 0xab, 0x88, 0x18, 0xad,
	0x4b, 0xd6, 0xc7, 0xc3, 0xce, 0xe4, 0x89, 0x3a, 0xe9, 0x0c, 0x19, 0x3b, 0x12, 0xdc, 0x5c, 0x32,
	0x0f, 0x9e, 0x4d, 0x49, 0x47, 0x2c, 0xee, 0xff, 0x8a, 0x00, 0x7f, 0xa8, 0x4d, 0xf8, 0x1e, 0x34,
	0xaf, 0x3e, 0xe8, 0x8c, 0xc7, 0xc3, 0xdc, 0x69, 0x35, 0x61, 0x2b, 0xd7, 0xeb, 0x8a, 0xb8, 0x5d,
	0xd8, 0xcc, 0xf5, 0xe8, 0x9e, 0x8c, 0xfa, 0xbc, 0xb2, 0xbb, 0xb0, 0x9b, 0x1f, 0xa2, 0x43, 0xa6,
	0xaa, 0x42, 0xfa, 0x6c, 0x78, 0x59, 0x6e, 0x52, 0x4e, 0x91, 0x5d, 0xd8, 0x7f, 0x0a, 0xb5, 0x9e,
	0x6b, 0xdb, 0xec, 0x64, 0xb0, 0xe2, 0xb7, 0x40, 0xea, 0x29, 0xc7, 0xc7, 0x9d, 0x51, 0x3f, 0xaf,
	0xe8, 0x1d, 0xd8, 0xc8, 0x58, 0x3b, 0x27, 0x53, 0xa5, 0xd7, 0x19, 0xf5, 0x06, 0x43, 0xf5, 0xf4,
	0x50, 0x44, 0xdd, 0x87, 0xbf, 0xbd, 0xdf, 0x41, 0xbf, 0xbf, 0xdf, 0x41, 0x7f, 0xbc, 0xdf, 0x41,
	0xbf, 0xfc, 0xb9, 0xb3, 0xf2, 0xfd, 0xa6, 0xef, 0xe9, 0xed, 0x90, 0xbe, 0x71, 0x35, 0xcf, 0x0c,
	0xda, 0xba, 0x6b, 0x1f, 0xf8, 0x9e, 0x1e, 0xff, 0x92, 0xbf, 0x5c, 0xe5, 0x7f, 0xd9, 0x47, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x4f, 0x06, 0xae, 0xa9, 0x0b, 0x00, 0x00,
}

func (m *Customer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Customer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Customer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BundleId) > 0 {
		i -= len(m.BundleId)
		copy(dAtA[i:], m.BundleId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.BundleId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SellerId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x30
	}
	if m.UnitPrice != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.UnitPrice))
		i--
		dAtA[i] = 0x28
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Quantity != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Quantity))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Sku) > 0 {
		i -= len(m.Sku)
		copy(dAtA[i:], m.Sku)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Sku)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LineItemId) > 0 {
		i -= len(m.LineItemId)
		copy(dAtA[i:], m.LineItemId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LineItemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BillingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TaxIdNumber) > 0 {
		i -= len(m.TaxIdNumber)
		copy(dAtA[i:], m.TaxIdNumber)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TaxIdNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShippingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShippingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShippingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpectedDate != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ExpectedDate))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AddressCode) > 0 {
		i -= len(m.AddressCode)
		copy(dAtA[i:], m.AddressCode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.AddressCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StreetAddress) > 0 {
		i -= len(m.StreetAddress)
		copy(dAtA[i:], m.StreetAddress)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.StreetAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionCode) > 0 {
		i -= len(m.TransactionCode)
		copy(dAtA[i:], m.TransactionCode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TransactionCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromotionApplyOn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionApplyOn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionApplyOn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quantity != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LineItemId) > 0 {
		i -= len(m.LineItemId)
		copy(dAtA[i:], m.LineItemId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LineItemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromotionGift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionGift) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionGift) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quantity != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sku) > 0 {
		i -= len(m.Sku)
		copy(dAtA[i:], m.Sku)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Sku)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LineItemId) > 0 {
		i -= len(m.LineItemId)
		copy(dAtA[i:], m.LineItemId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LineItemId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromotionVoucher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromotionVoucher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromotionVoucher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Quantity != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Promotion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Promotion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Promotion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SellerId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.SellerId))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Coupon) > 0 {
		i -= len(m.Coupon)
		copy(dAtA[i:], m.Coupon)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Coupon)))
		i--
		dAtA[i] = 0x52
	}
	if m.Voucher != nil {
		{
			size, err := m.Voucher.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ApplyCount != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ApplyCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Gifts) > 0 {
		for iNdEx := len(m.Gifts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gifts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DiscountAmount != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.DiscountAmount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ApplyOn) > 0 {
		for iNdEx := len(m.ApplyOn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApplyOn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ApplyType != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ApplyType))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.PromotionId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.PromotionId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *SimplifiedOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimplifiedOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimplifiedOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TerminalId) > 0 {
		i -= len(m.TerminalId)
		copy(dAtA[i:], m.TerminalId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TerminalId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ClientOrderId) > 0 {
		i -= len(m.ClientOrderId)
		copy(dAtA[i:], m.ClientOrderId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ClientOrderId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReferralCode) > 0 {
		i -= len(m.ReferralCode)
		copy(dAtA[i:], m.ReferralCode)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.ReferralCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GrandTotal != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.GrandTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.ShippingInfo != nil {
		{
			size, err := m.ShippingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Customer != nil {
		{
			size, err := m.Customer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Customer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LineItemId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Sku)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Quantity != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	if m.UnitPrice != 0 {
		n += 1 + sovCommon(uint64(m.UnitPrice))
	}
	if m.SellerId != 0 {
		n += 1 + sovCommon(uint64(m.SellerId))
	}
	l = len(m.BundleId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TaxIdNumber)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShippingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.StreetAddress)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.AddressCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ExpectedDate != 0 {
		n += 1 + sovCommon(uint64(m.ExpectedDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCommon(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionApplyOn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LineItemId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovCommon(uint64(m.Quantity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionGift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LineItemId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Sku)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovCommon(uint64(m.Quantity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromotionVoucher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quantity != 0 {
		n += 1 + sovCommon(uint64(m.Quantity))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Promotion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PromotionId != 0 {
		n += 1 + sovCommon(uint64(m.PromotionId))
	}
	if m.Type != 0 {
		n += 1 + sovCommon(uint64(m.Type))
	}
	if m.ApplyType != 0 {
		n += 1 + sovCommon(uint64(m.ApplyType))
	}
	if len(m.ApplyOn) > 0 {
		for _, e := range m.ApplyOn {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.DiscountAmount != 0 {
		n += 1 + sovCommon(uint64(m.DiscountAmount))
	}
	if len(m.Gifts) > 0 {
		for _, e := range m.Gifts {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.ApplyCount != 0 {
		n += 1 + sovCommon(uint64(m.ApplyCount))
	}
	if m.Voucher != nil {
		l = m.Voucher.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Coupon)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.SellerId != 0 {
		n += 1 + sovCommon(uint64(m.SellerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimplifiedOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCommon(uint64(m.Id))
	}
	if m.Customer != nil {
		l = m.Customer.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.ShippingInfo != nil {
		l = m.ShippingInfo.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.GrandTotal != 0 {
		n += 1 + sovCommon(uint64(m.GrandTotal))
	}
	l = len(m.ReferralCode)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.ClientOrderId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.TerminalId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Customer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sku = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Quantity = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ItemType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitPrice", wireType)
			}
			m.UnitPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxIdNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxIdNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TaxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShippingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShippingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShippingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedDate", wireType)
			}
			m.ExpectedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpectedDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionApplyOn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionApplyOn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionApplyOn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionGift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionGift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionGift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineItemId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LineItemId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sku", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sku = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromotionVoucher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromotionVoucher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromotionVoucher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Promotion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Promotion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Promotion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionId", wireType)
			}
			m.PromotionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PromotionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyType", wireType)
			}
			m.ApplyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyType |= PromotionApplyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyOn = append(m.ApplyOn, &PromotionApplyOn{})
			if err := m.ApplyOn[len(m.ApplyOn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountAmount", wireType)
			}
			m.DiscountAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscountAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifts = append(m.Gifts, &PromotionGift{})
			if err := m.Gifts[len(m.Gifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyCount", wireType)
			}
			m.ApplyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voucher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voucher == nil {
				m.Voucher = &PromotionVoucher{}
			}
			if err := m.Voucher.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coupon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coupon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerId", wireType)
			}
			m.SellerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimplifiedOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimplifiedOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimplifiedOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Customer == nil {
				m.Customer = &Customer{}
			}
			if err := m.Customer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingInfo == nil {
				m.ShippingInfo = &ShippingInfo{}
			}
			if err := m.ShippingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			m.GrandTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrandTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferralCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferralCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &PaymentDetail{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
