// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/orders/v3/capturing_service.proto

package orders

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PrivateCaptureOrderRequest ...
type PrivateCaptureOrderRequest struct {
	Customer     *Customer     `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Items        []*Item       `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	BillingInfo  *BillingInfo  `protobuf:"bytes,3,opt,name=billing_info,json=billingInfo,proto3" json:"billing_info,omitempty"`
	ShippingInfo *ShippingInfo `protobuf:"bytes,4,opt,name=shipping_info,json=shippingInfo,proto3" json:"shipping_info,omitempty"`
	Note         string        `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	// grand_total: total money value of this order, without apply promotion
	GrandTotal uint64 `protobuf:"varint,6,opt,name=grand_total,json=grandTotal,proto3" json:"grand_total,omitempty"`
	// partner_ref_code: the code to parner system (eg: Vin's D365) to reference
	PartnerRefCode string `protobuf:"bytes,7,opt,name=partner_ref_code,json=partnerRefCode,proto3" json:"partner_ref_code,omitempty"`
	// ref_code: internal system ref (when cancel and recreate new order)
	RefCode string `protobuf:"bytes,8,opt,name=ref_code,json=refCode,proto3" json:"ref_code,omitempty"`
	// terminal_code: code of terminal created this order
	TerminalCode string       `protobuf:"bytes,9,opt,name=terminal_code,json=terminalCode,proto3" json:"terminal_code,omitempty"`
	Promotions   []*Promotion `protobuf:"bytes,10,rep,name=promotions,proto3" json:"promotions,omitempty"`
	// loyalty: the loyalty info to request to redeemp point this order
	Loyalty *Loyalty `protobuf:"bytes,11,opt,name=loyalty,proto3" json:"loyalty,omitempty"`
	// cod_payment: user choose to paid this order when COD
	CodPayment *CODPayment `protobuf:"bytes,12,opt,name=cod_payment,json=codPayment,proto3" json:"cod_payment,omitempty"`
	// delivery type
	DeliveryType         DeliveryType `protobuf:"varint,13,opt,name=delivery_type,json=deliveryType,proto3,enum=orders.v3.DeliveryType" json:"delivery_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PrivateCaptureOrderRequest) Reset()         { *m = PrivateCaptureOrderRequest{} }
func (m *PrivateCaptureOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateCaptureOrderRequest) ProtoMessage()    {}
func (*PrivateCaptureOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{0}
}
func (m *PrivateCaptureOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCaptureOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCaptureOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCaptureOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCaptureOrderRequest.Merge(m, src)
}
func (m *PrivateCaptureOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCaptureOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCaptureOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCaptureOrderRequest proto.InternalMessageInfo

func (m *PrivateCaptureOrderRequest) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetShippingInfo() *ShippingInfo {
	if m != nil {
		return m.ShippingInfo
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *PrivateCaptureOrderRequest) GetGrandTotal() uint64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *PrivateCaptureOrderRequest) GetPartnerRefCode() string {
	if m != nil {
		return m.PartnerRefCode
	}
	return ""
}

func (m *PrivateCaptureOrderRequest) GetRefCode() string {
	if m != nil {
		return m.RefCode
	}
	return ""
}

func (m *PrivateCaptureOrderRequest) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *PrivateCaptureOrderRequest) GetPromotions() []*Promotion {
	if m != nil {
		return m.Promotions
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetLoyalty() *Loyalty {
	if m != nil {
		return m.Loyalty
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetCodPayment() *CODPayment {
	if m != nil {
		return m.CodPayment
	}
	return nil
}

func (m *PrivateCaptureOrderRequest) GetDeliveryType() DeliveryType {
	if m != nil {
		return m.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNSPECIFIED
}

// InternalRecordPaymentIPNRequest ...
type InternalRecordPaymentIPNRequest struct {
	// This code is provided by the Payment service to each Terminal when
	// integrated
	TerminalCode string `protobuf:"bytes,1,opt,name=terminal_code,json=terminalCode,proto3" json:"terminal_code,omitempty"`
	// Payment method code on Payment Service
	MethodCode string `protobuf:"bytes,2,opt,name=method_code,json=methodCode,proto3" json:"method_code,omitempty"`
	// Partner payment code on Payment Service
	PartnerCode string `protobuf:"bytes,3,opt,name=partner_code,json=partnerCode,proto3" json:"partner_code,omitempty"`
	// The code / ID of the payment order is referenced
	OrderCode string `protobuf:"bytes,4,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	// Payment amount
	Amount int64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Transaction code on Payment Service
	TransactionCode string `protobuf:"bytes,6,opt,name=transaction_code,json=transactionCode,proto3" json:"transaction_code,omitempty"`
	// Payment response code
	// "00" corresponding to the success result.
	ResponseCode string `protobuf:"bytes,7,opt,name=response_code,json=responseCode,proto3" json:"response_code,omitempty"`
	// Specific description of response_code
	ResponseMessage string `protobuf:"bytes,8,opt,name=response_message,json=responseMessage,proto3" json:"response_message,omitempty"`
	// Reference code on the Payment Partner's system
	PartnerTransactionCode string `protobuf:"bytes,9,opt,name=partner_transaction_code,json=partnerTransactionCode,proto3" json:"partner_transaction_code,omitempty"`
	// Encryption string ensures information is not changed during information
	// exchange The encrypted string from the secret key provided by the Payment
	// Service to the client when integrated
	Checksum             string   `protobuf:"bytes,10,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalRecordPaymentIPNRequest) Reset()         { *m = InternalRecordPaymentIPNRequest{} }
func (m *InternalRecordPaymentIPNRequest) String() string { return proto.CompactTextString(m) }
func (*InternalRecordPaymentIPNRequest) ProtoMessage()    {}
func (*InternalRecordPaymentIPNRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{1}
}
func (m *InternalRecordPaymentIPNRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalRecordPaymentIPNRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalRecordPaymentIPNRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalRecordPaymentIPNRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRecordPaymentIPNRequest.Merge(m, src)
}
func (m *InternalRecordPaymentIPNRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalRecordPaymentIPNRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRecordPaymentIPNRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRecordPaymentIPNRequest proto.InternalMessageInfo

func (m *InternalRecordPaymentIPNRequest) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetMethodCode() string {
	if m != nil {
		return m.MethodCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetPartnerCode() string {
	if m != nil {
		return m.PartnerCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *InternalRecordPaymentIPNRequest) GetTransactionCode() string {
	if m != nil {
		return m.TransactionCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetResponseCode() string {
	if m != nil {
		return m.ResponseCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetPartnerTransactionCode() string {
	if m != nil {
		return m.PartnerTransactionCode
	}
	return ""
}

func (m *InternalRecordPaymentIPNRequest) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

// PrivateChangeCODPaymentRequest ...
type PrivateChangeCODPaymentRequest struct {
	OrderCode string `protobuf:"bytes,1,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	// cod_payment: user choose to paid this order when COD
	CodPayment           *CODPayment `protobuf:"bytes,2,opt,name=cod_payment,json=codPayment,proto3" json:"cod_payment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PrivateChangeCODPaymentRequest) Reset()         { *m = PrivateChangeCODPaymentRequest{} }
func (m *PrivateChangeCODPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateChangeCODPaymentRequest) ProtoMessage()    {}
func (*PrivateChangeCODPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{2}
}
func (m *PrivateChangeCODPaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateChangeCODPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateChangeCODPaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateChangeCODPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateChangeCODPaymentRequest.Merge(m, src)
}
func (m *PrivateChangeCODPaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateChangeCODPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateChangeCODPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateChangeCODPaymentRequest proto.InternalMessageInfo

func (m *PrivateChangeCODPaymentRequest) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

func (m *PrivateChangeCODPaymentRequest) GetCodPayment() *CODPayment {
	if m != nil {
		return m.CodPayment
	}
	return nil
}

// InternalGetOrderByCodeRequest ...
type InternalGetOrderByCodeRequest struct {
	OrderCode            string   `protobuf:"bytes,1,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalGetOrderByCodeRequest) Reset()         { *m = InternalGetOrderByCodeRequest{} }
func (m *InternalGetOrderByCodeRequest) String() string { return proto.CompactTextString(m) }
func (*InternalGetOrderByCodeRequest) ProtoMessage()    {}
func (*InternalGetOrderByCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{3}
}
func (m *InternalGetOrderByCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalGetOrderByCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalGetOrderByCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalGetOrderByCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalGetOrderByCodeRequest.Merge(m, src)
}
func (m *InternalGetOrderByCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalGetOrderByCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalGetOrderByCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalGetOrderByCodeRequest proto.InternalMessageInfo

func (m *InternalGetOrderByCodeRequest) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

// PrivateGetOrderByCodeRequest ...
type PrivateGetOrderByCodeRequest struct {
	OrderCode            string   `protobuf:"bytes,1,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateGetOrderByCodeRequest) Reset()         { *m = PrivateGetOrderByCodeRequest{} }
func (m *PrivateGetOrderByCodeRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateGetOrderByCodeRequest) ProtoMessage()    {}
func (*PrivateGetOrderByCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{4}
}
func (m *PrivateGetOrderByCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateGetOrderByCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateGetOrderByCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateGetOrderByCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateGetOrderByCodeRequest.Merge(m, src)
}
func (m *PrivateGetOrderByCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateGetOrderByCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateGetOrderByCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateGetOrderByCodeRequest proto.InternalMessageInfo

func (m *PrivateGetOrderByCodeRequest) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

// PrivateCancelOrderRequest ...
type PrivateCancelOrderRequest struct {
	OrderCode            string   `protobuf:"bytes,1,opt,name=order_code,json=orderCode,proto3" json:"order_code,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateCancelOrderRequest) Reset()         { *m = PrivateCancelOrderRequest{} }
func (m *PrivateCancelOrderRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateCancelOrderRequest) ProtoMessage()    {}
func (*PrivateCancelOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{5}
}
func (m *PrivateCancelOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCancelOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCancelOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCancelOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCancelOrderRequest.Merge(m, src)
}
func (m *PrivateCancelOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCancelOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCancelOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCancelOrderRequest proto.InternalMessageInfo

func (m *PrivateCancelOrderRequest) GetOrderCode() string {
	if m != nil {
		return m.OrderCode
	}
	return ""
}

func (m *PrivateCancelOrderRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// InternalListOrdersRequest ...
type InternalListOrdersRequest struct {
	// Query params:
	StateIn              string   `protobuf:"bytes,1,opt,name=state_in,proto3" json:"state_in,omitempty"`
	Offset               string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                string   `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalListOrdersRequest) Reset()         { *m = InternalListOrdersRequest{} }
func (m *InternalListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*InternalListOrdersRequest) ProtoMessage()    {}
func (*InternalListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{6}
}
func (m *InternalListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalListOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalListOrdersRequest.Merge(m, src)
}
func (m *InternalListOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalListOrdersRequest proto.InternalMessageInfo

func (m *InternalListOrdersRequest) GetStateIn() string {
	if m != nil {
		return m.StateIn
	}
	return ""
}

func (m *InternalListOrdersRequest) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *InternalListOrdersRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

// PrivateListOrdersRequest ...
type PrivateListOrdersRequest struct {
	// Query params:
	StateIn              string   `protobuf:"bytes,1,opt,name=state_in,proto3" json:"state_in,omitempty"`
	Offset               string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                string   `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateListOrdersRequest) Reset()         { *m = PrivateListOrdersRequest{} }
func (m *PrivateListOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateListOrdersRequest) ProtoMessage()    {}
func (*PrivateListOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{7}
}
func (m *PrivateListOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateListOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateListOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateListOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateListOrdersRequest.Merge(m, src)
}
func (m *PrivateListOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateListOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateListOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateListOrdersRequest proto.InternalMessageInfo

func (m *PrivateListOrdersRequest) GetStateIn() string {
	if m != nil {
		return m.StateIn
	}
	return ""
}

func (m *PrivateListOrdersRequest) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *PrivateListOrdersRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

// InternalScheduleOrderCommandRequest ...
type InternalScheduleOrderCommandRequest struct {
	OrderId              string      `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ExecutedAt           uint64      `protobuf:"varint,2,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	Type                 CommandType `protobuf:"varint,3,opt,name=type,proto3,enum=orders.v3.CommandType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *InternalScheduleOrderCommandRequest) Reset()         { *m = InternalScheduleOrderCommandRequest{} }
func (m *InternalScheduleOrderCommandRequest) String() string { return proto.CompactTextString(m) }
func (*InternalScheduleOrderCommandRequest) ProtoMessage()    {}
func (*InternalScheduleOrderCommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{8}
}
func (m *InternalScheduleOrderCommandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalScheduleOrderCommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalScheduleOrderCommandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalScheduleOrderCommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalScheduleOrderCommandRequest.Merge(m, src)
}
func (m *InternalScheduleOrderCommandRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalScheduleOrderCommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalScheduleOrderCommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalScheduleOrderCommandRequest proto.InternalMessageInfo

func (m *InternalScheduleOrderCommandRequest) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *InternalScheduleOrderCommandRequest) GetExecutedAt() uint64 {
	if m != nil {
		return m.ExecutedAt
	}
	return 0
}

func (m *InternalScheduleOrderCommandRequest) GetType() CommandType {
	if m != nil {
		return m.Type
	}
	return CommandType_COMMAND_TYPE_UNSPECIFIED
}

/// PrivateCaptureOrderResponse ...
type PrivateCaptureOrderResponse struct {
	// id: order's id
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// code: order's code
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// state: order's state (eg: CREATED, WAIT_FOR_PAYMENT, PAID)
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// grand_total: total money value of this order
	GrandTotal uint64 `protobuf:"varint,4,opt,name=grand_total,json=grandTotal,proto3" json:"grand_total,omitempty"`
	// expired_at: timestamp when this order will be autocancelled
	ExpiredAt            uint64   `protobuf:"varint,5,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateCaptureOrderResponse) Reset()         { *m = PrivateCaptureOrderResponse{} }
func (m *PrivateCaptureOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateCaptureOrderResponse) ProtoMessage()    {}
func (*PrivateCaptureOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{9}
}
func (m *PrivateCaptureOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCaptureOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCaptureOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCaptureOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCaptureOrderResponse.Merge(m, src)
}
func (m *PrivateCaptureOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCaptureOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCaptureOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCaptureOrderResponse proto.InternalMessageInfo

func (m *PrivateCaptureOrderResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PrivateCaptureOrderResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *PrivateCaptureOrderResponse) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PrivateCaptureOrderResponse) GetGrandTotal() uint64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *PrivateCaptureOrderResponse) GetExpiredAt() uint64 {
	if m != nil {
		return m.ExpiredAt
	}
	return 0
}

// InternalRecordPaymentIPNResponse
type InternalRecordPaymentIPNResponse struct {
	// Payment Service response code
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Specific description of code
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Reference code on the Payment Service
	TraceId              string   `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalRecordPaymentIPNResponse) Reset()         { *m = InternalRecordPaymentIPNResponse{} }
func (m *InternalRecordPaymentIPNResponse) String() string { return proto.CompactTextString(m) }
func (*InternalRecordPaymentIPNResponse) ProtoMessage()    {}
func (*InternalRecordPaymentIPNResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{10}
}
func (m *InternalRecordPaymentIPNResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalRecordPaymentIPNResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalRecordPaymentIPNResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalRecordPaymentIPNResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalRecordPaymentIPNResponse.Merge(m, src)
}
func (m *InternalRecordPaymentIPNResponse) XXX_Size() int {
	return m.Size()
}
func (m *InternalRecordPaymentIPNResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalRecordPaymentIPNResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalRecordPaymentIPNResponse proto.InternalMessageInfo

func (m *InternalRecordPaymentIPNResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *InternalRecordPaymentIPNResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *InternalRecordPaymentIPNResponse) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

// PrivateGetOrderByCodeResponse ...
type PrivateGetOrderByCodeResponse struct {
	Customer               *Customer        `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Items                  []*Item          `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Note                   string           `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	BillingInfo            *BillingInfo     `protobuf:"bytes,4,opt,name=billing_info,json=billingInfo,proto3" json:"billing_info,omitempty"`
	ShippingInfo           *ShippingInfo    `protobuf:"bytes,5,opt,name=shipping_info,json=shippingInfo,proto3" json:"shipping_info,omitempty"`
	GrandTotal             uint64           `protobuf:"varint,6,opt,name=grand_total,json=grandTotal,proto3" json:"grand_total,omitempty"`
	RefCode                string           `protobuf:"bytes,7,opt,name=ref_code,json=refCode,proto3" json:"ref_code,omitempty"`
	PartnerRefCode         string           `protobuf:"bytes,8,opt,name=partner_ref_code,json=partnerRefCode,proto3" json:"partner_ref_code,omitempty"`
	TerminalCode           string           `protobuf:"bytes,9,opt,name=terminal_code,json=terminalCode,proto3" json:"terminal_code,omitempty"`
	Payments               []*PaymentDetail `protobuf:"bytes,10,rep,name=payments,proto3" json:"payments,omitempty"`
	Status                 string           `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	DeliveryType           DeliveryType     `protobuf:"varint,12,opt,name=delivery_type,json=deliveryType,proto3,enum=orders.v3.DeliveryType" json:"delivery_type,omitempty"`
	PromotionDiscount      uint64           `protobuf:"varint,13,opt,name=promotion_discount,json=promotionDiscount,proto3" json:"promotion_discount,omitempty"`
	PromotionTransactionId string           `protobuf:"bytes,14,opt,name=promotion_transaction_id,json=promotionTransactionId,proto3" json:"promotion_transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_unrecognized       []byte           `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *PrivateGetOrderByCodeResponse) Reset()         { *m = PrivateGetOrderByCodeResponse{} }
func (m *PrivateGetOrderByCodeResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateGetOrderByCodeResponse) ProtoMessage()    {}
func (*PrivateGetOrderByCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{11}
}
func (m *PrivateGetOrderByCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateGetOrderByCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateGetOrderByCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateGetOrderByCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateGetOrderByCodeResponse.Merge(m, src)
}
func (m *PrivateGetOrderByCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateGetOrderByCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateGetOrderByCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateGetOrderByCodeResponse proto.InternalMessageInfo

func (m *PrivateGetOrderByCodeResponse) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *PrivateGetOrderByCodeResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PrivateGetOrderByCodeResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *PrivateGetOrderByCodeResponse) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

func (m *PrivateGetOrderByCodeResponse) GetShippingInfo() *ShippingInfo {
	if m != nil {
		return m.ShippingInfo
	}
	return nil
}

func (m *PrivateGetOrderByCodeResponse) GetGrandTotal() uint64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *PrivateGetOrderByCodeResponse) GetRefCode() string {
	if m != nil {
		return m.RefCode
	}
	return ""
}

func (m *PrivateGetOrderByCodeResponse) GetPartnerRefCode() string {
	if m != nil {
		return m.PartnerRefCode
	}
	return ""
}

func (m *PrivateGetOrderByCodeResponse) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *PrivateGetOrderByCodeResponse) GetPayments() []*PaymentDetail {
	if m != nil {
		return m.Payments
	}
	return nil
}

func (m *PrivateGetOrderByCodeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PrivateGetOrderByCodeResponse) GetDeliveryType() DeliveryType {
	if m != nil {
		return m.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNSPECIFIED
}

func (m *PrivateGetOrderByCodeResponse) GetPromotionDiscount() uint64 {
	if m != nil {
		return m.PromotionDiscount
	}
	return 0
}

func (m *PrivateGetOrderByCodeResponse) GetPromotionTransactionId() string {
	if m != nil {
		return m.PromotionTransactionId
	}
	return ""
}

// InternalGetOrderByCodeResponse ...
type InternalGetOrderByCodeResponse struct {
	Customer               *Customer        `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	Items                  []*Item          `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Note                   string           `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	BillingInfo            *BillingInfo     `protobuf:"bytes,4,opt,name=billing_info,json=billingInfo,proto3" json:"billing_info,omitempty"`
	ShippingInfo           *ShippingInfo    `protobuf:"bytes,5,opt,name=shipping_info,json=shippingInfo,proto3" json:"shipping_info,omitempty"`
	GrandTotal             uint64           `protobuf:"varint,6,opt,name=grand_total,json=grandTotal,proto3" json:"grand_total,omitempty"`
	RefCode                string           `protobuf:"bytes,7,opt,name=ref_code,json=refCode,proto3" json:"ref_code,omitempty"`
	PartnerRefCode         string           `protobuf:"bytes,8,opt,name=partner_ref_code,json=partnerRefCode,proto3" json:"partner_ref_code,omitempty"`
	TerminalCode           string           `protobuf:"bytes,9,opt,name=terminal_code,json=terminalCode,proto3" json:"terminal_code,omitempty"`
	Payments               []*PaymentDetail `protobuf:"bytes,10,rep,name=payments,proto3" json:"payments,omitempty"`
	Status                 string           `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	DeliveryType           DeliveryType     `protobuf:"varint,12,opt,name=delivery_type,json=deliveryType,proto3,enum=orders.v3.DeliveryType" json:"delivery_type,omitempty"`
	PromotionDiscount      uint64           `protobuf:"varint,13,opt,name=promotion_discount,json=promotionDiscount,proto3" json:"promotion_discount,omitempty"`
	PromotionTransactionId string           `protobuf:"bytes,14,opt,name=promotion_transaction_id,json=promotionTransactionId,proto3" json:"promotion_transaction_id,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}         `json:"-"`
	XXX_unrecognized       []byte           `json:"-"`
	XXX_sizecache          int32            `json:"-"`
}

func (m *InternalGetOrderByCodeResponse) Reset()         { *m = InternalGetOrderByCodeResponse{} }
func (m *InternalGetOrderByCodeResponse) String() string { return proto.CompactTextString(m) }
func (*InternalGetOrderByCodeResponse) ProtoMessage()    {}
func (*InternalGetOrderByCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{12}
}
func (m *InternalGetOrderByCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalGetOrderByCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalGetOrderByCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalGetOrderByCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalGetOrderByCodeResponse.Merge(m, src)
}
func (m *InternalGetOrderByCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *InternalGetOrderByCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalGetOrderByCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalGetOrderByCodeResponse proto.InternalMessageInfo

func (m *InternalGetOrderByCodeResponse) GetCustomer() *Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *InternalGetOrderByCodeResponse) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *InternalGetOrderByCodeResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *InternalGetOrderByCodeResponse) GetBillingInfo() *BillingInfo {
	if m != nil {
		return m.BillingInfo
	}
	return nil
}

func (m *InternalGetOrderByCodeResponse) GetShippingInfo() *ShippingInfo {
	if m != nil {
		return m.ShippingInfo
	}
	return nil
}

func (m *InternalGetOrderByCodeResponse) GetGrandTotal() uint64 {
	if m != nil {
		return m.GrandTotal
	}
	return 0
}

func (m *InternalGetOrderByCodeResponse) GetRefCode() string {
	if m != nil {
		return m.RefCode
	}
	return ""
}

func (m *InternalGetOrderByCodeResponse) GetPartnerRefCode() string {
	if m != nil {
		return m.PartnerRefCode
	}
	return ""
}

func (m *InternalGetOrderByCodeResponse) GetTerminalCode() string {
	if m != nil {
		return m.TerminalCode
	}
	return ""
}

func (m *InternalGetOrderByCodeResponse) GetPayments() []*PaymentDetail {
	if m != nil {
		return m.Payments
	}
	return nil
}

func (m *InternalGetOrderByCodeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *InternalGetOrderByCodeResponse) GetDeliveryType() DeliveryType {
	if m != nil {
		return m.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNSPECIFIED
}

func (m *InternalGetOrderByCodeResponse) GetPromotionDiscount() uint64 {
	if m != nil {
		return m.PromotionDiscount
	}
	return 0
}

func (m *InternalGetOrderByCodeResponse) GetPromotionTransactionId() string {
	if m != nil {
		return m.PromotionTransactionId
	}
	return ""
}

// InternalScheduleOrderCommandResponse ...
type InternalScheduleOrderCommandResponse struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalScheduleOrderCommandResponse) Reset()         { *m = InternalScheduleOrderCommandResponse{} }
func (m *InternalScheduleOrderCommandResponse) String() string { return proto.CompactTextString(m) }
func (*InternalScheduleOrderCommandResponse) ProtoMessage()    {}
func (*InternalScheduleOrderCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{13}
}
func (m *InternalScheduleOrderCommandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalScheduleOrderCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalScheduleOrderCommandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalScheduleOrderCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalScheduleOrderCommandResponse.Merge(m, src)
}
func (m *InternalScheduleOrderCommandResponse) XXX_Size() int {
	return m.Size()
}
func (m *InternalScheduleOrderCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalScheduleOrderCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalScheduleOrderCommandResponse proto.InternalMessageInfo

func (m *InternalScheduleOrderCommandResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *InternalScheduleOrderCommandResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// StandardResponse an standard response to ack or unack a request
type PrivateChangeCODPaymentResponse struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateChangeCODPaymentResponse) Reset()         { *m = PrivateChangeCODPaymentResponse{} }
func (m *PrivateChangeCODPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateChangeCODPaymentResponse) ProtoMessage()    {}
func (*PrivateChangeCODPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{14}
}
func (m *PrivateChangeCODPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateChangeCODPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateChangeCODPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateChangeCODPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateChangeCODPaymentResponse.Merge(m, src)
}
func (m *PrivateChangeCODPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateChangeCODPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateChangeCODPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateChangeCODPaymentResponse proto.InternalMessageInfo

func (m *PrivateChangeCODPaymentResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *PrivateChangeCODPaymentResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PrivateCancelOrderResponse an standard response to ack or unack a request
type PrivateCancelOrderResponse struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateCancelOrderResponse) Reset()         { *m = PrivateCancelOrderResponse{} }
func (m *PrivateCancelOrderResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateCancelOrderResponse) ProtoMessage()    {}
func (*PrivateCancelOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{15}
}
func (m *PrivateCancelOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateCancelOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateCancelOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateCancelOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateCancelOrderResponse.Merge(m, src)
}
func (m *PrivateCancelOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateCancelOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateCancelOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateCancelOrderResponse proto.InternalMessageInfo

func (m *PrivateCancelOrderResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *PrivateCancelOrderResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// InternalListOrdersResponse ...
type InternalListOrdersResponse struct {
	Total                uint32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Limit                uint32             `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               uint32             `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Orders               []*SimplifiedOrder `protobuf:"bytes,4,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InternalListOrdersResponse) Reset()         { *m = InternalListOrdersResponse{} }
func (m *InternalListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*InternalListOrdersResponse) ProtoMessage()    {}
func (*InternalListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{16}
}
func (m *InternalListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalListOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalListOrdersResponse.Merge(m, src)
}
func (m *InternalListOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *InternalListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InternalListOrdersResponse proto.InternalMessageInfo

func (m *InternalListOrdersResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *InternalListOrdersResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *InternalListOrdersResponse) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *InternalListOrdersResponse) GetOrders() []*SimplifiedOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// PrivateListOrdersResponse ...
type PrivateListOrdersResponse struct {
	Total                uint32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Limit                uint32             `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               uint32             `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Orders               []*SimplifiedOrder `protobuf:"bytes,4,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PrivateListOrdersResponse) Reset()         { *m = PrivateListOrdersResponse{} }
func (m *PrivateListOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateListOrdersResponse) ProtoMessage()    {}
func (*PrivateListOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{17}
}
func (m *PrivateListOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateListOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateListOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateListOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateListOrdersResponse.Merge(m, src)
}
func (m *PrivateListOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *PrivateListOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateListOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateListOrdersResponse proto.InternalMessageInfo

func (m *PrivateListOrdersResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PrivateListOrdersResponse) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PrivateListOrdersResponse) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PrivateListOrdersResponse) GetOrders() []*SimplifiedOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// Loyalty store loyalty information and request amount to redemption
type Loyalty struct {
	// amount of spend value
	Amount float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// point to spend; Loyalty system rule: if both amount and point is provided,
	// amount will have higher priority
	Point                uint64   `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Loyalty) Reset()         { *m = Loyalty{} }
func (m *Loyalty) String() string { return proto.CompactTextString(m) }
func (*Loyalty) ProtoMessage()    {}
func (*Loyalty) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{18}
}
func (m *Loyalty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loyalty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loyalty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loyalty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loyalty.Merge(m, src)
}
func (m *Loyalty) XXX_Size() int {
	return m.Size()
}
func (m *Loyalty) XXX_DiscardUnknown() {
	xxx_messageInfo_Loyalty.DiscardUnknown(m)
}

var xxx_messageInfo_Loyalty proto.InternalMessageInfo

func (m *Loyalty) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Loyalty) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

// CODPayment store COD paid information
type CODPayment struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CODPayment) Reset()         { *m = CODPayment{} }
func (m *CODPayment) String() string { return proto.CompactTextString(m) }
func (*CODPayment) ProtoMessage()    {}
func (*CODPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bb70d5832194bc9, []int{19}
}
func (m *CODPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CODPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CODPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CODPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CODPayment.Merge(m, src)
}
func (m *CODPayment) XXX_Size() int {
	return m.Size()
}
func (m *CODPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_CODPayment.DiscardUnknown(m)
}

var xxx_messageInfo_CODPayment proto.InternalMessageInfo

func (m *CODPayment) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*PrivateCaptureOrderRequest)(nil), "orders.v3.PrivateCaptureOrderRequest")
	proto.RegisterType((*InternalRecordPaymentIPNRequest)(nil), "orders.v3.InternalRecordPaymentIPNRequest")
	proto.RegisterType((*PrivateChangeCODPaymentRequest)(nil), "orders.v3.PrivateChangeCODPaymentRequest")
	proto.RegisterType((*InternalGetOrderByCodeRequest)(nil), "orders.v3.InternalGetOrderByCodeRequest")
	proto.RegisterType((*PrivateGetOrderByCodeRequest)(nil), "orders.v3.PrivateGetOrderByCodeRequest")
	proto.RegisterType((*PrivateCancelOrderRequest)(nil), "orders.v3.PrivateCancelOrderRequest")
	proto.RegisterType((*InternalListOrdersRequest)(nil), "orders.v3.InternalListOrdersRequest")
	proto.RegisterType((*PrivateListOrdersRequest)(nil), "orders.v3.PrivateListOrdersRequest")
	proto.RegisterType((*InternalScheduleOrderCommandRequest)(nil), "orders.v3.InternalScheduleOrderCommandRequest")
	proto.RegisterType((*PrivateCaptureOrderResponse)(nil), "orders.v3.PrivateCaptureOrderResponse")
	proto.RegisterType((*InternalRecordPaymentIPNResponse)(nil), "orders.v3.InternalRecordPaymentIPNResponse")
	proto.RegisterType((*PrivateGetOrderByCodeResponse)(nil), "orders.v3.PrivateGetOrderByCodeResponse")
	proto.RegisterType((*InternalGetOrderByCodeResponse)(nil), "orders.v3.InternalGetOrderByCodeResponse")
	proto.RegisterType((*InternalScheduleOrderCommandResponse)(nil), "orders.v3.InternalScheduleOrderCommandResponse")
	proto.RegisterType((*PrivateChangeCODPaymentResponse)(nil), "orders.v3.PrivateChangeCODPaymentResponse")
	proto.RegisterType((*PrivateCancelOrderResponse)(nil), "orders.v3.PrivateCancelOrderResponse")
	proto.RegisterType((*InternalListOrdersResponse)(nil), "orders.v3.InternalListOrdersResponse")
	proto.RegisterType((*PrivateListOrdersResponse)(nil), "orders.v3.PrivateListOrdersResponse")
	proto.RegisterType((*Loyalty)(nil), "orders.v3.Loyalty")
	proto.RegisterType((*CODPayment)(nil), "orders.v3.CODPayment")
}

func init() {
	proto.RegisterFile("proto/orders/v3/capturing_service.proto", fileDescriptor_1bb70d5832194bc9)
}

var fileDescriptor_1bb70d5832194bc9 = []byte{
	// 1611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0xf7, 0xec, 0x87, 0x76, 0xf5, 0x76, 0x25, 0xcb, 0x63, 0x59, 0xa2, 0xd6, 0xfa, 0x32, 0x25,
	0xd9, 0x2b, 0xd9, 0x5e, 0xb6, 0x52, 0xdd, 0x0f, 0xb7, 0x17, 0xaf, 0x04, 0xd4, 0x5b, 0xb8, 0xb5,
	0x40, 0xeb, 0x54, 0xa0, 0x58, 0xd0, 0xe4, 0x48, 0x22, 0xbc, 0xe4, 0xb0, 0xe4, 0xac, 0x60, 0xa1,
	0x68, 0x0f, 0x42, 0x8b, 0x9e, 0x72, 0xb1, 0x03, 0xd8, 0x40, 0x6e, 0x49, 0xae, 0xf9, 0x3f, 0x72,
	0x0c, 0x90, 0x7f, 0x20, 0x70, 0xf2, 0x2f, 0xe4, 0xa2, 0x4b, 0x02, 0xce, 0x07, 0xc5, 0xdd, 0xe5,
	0x4a, 0x6b, 0x1b, 0x09, 0x72, 0xf0, 0x8d, 0x6f, 0xde, 0x6f, 0x66, 0x7e, 0x33, 0xf3, 0x9b, 0xf7,
	0xde, 0x10, 0x6e, 0x05, 0x21, 0x65, 0xd4, 0xa0, 0xa1, 0x43, 0xc2, 0xc8, 0x38, 0xda, 0x32, 0x6c,
	0x2b, 0x60, 0xdd, 0xd0, 0xf5, 0x0f, 0xda, 0x11, 0x09, 0x8f, 0x5c, 0x9b, 0x34, 0x38, 0x02, 0x8f,
	0x0b, 0x48, 0xe3, 0x68, 0xab, 0x36, 0x7f, 0x40, 0xe9, 0x41, 0x87, 0x18, 0x56, 0xe0, 0x1a, 0x96,
	0xef, 0x53, 0x66, 0x31, 0x97, 0xfa, 0x91, 0x00, 0xd6, 0x66, 0x8f, 0xac, 0x8e, 0xeb, 0x58, 0x8c,
	0x18, 0xea, 0x43, 0x3a, 0x66, 0x52, 0x93, 0x50, 0xcf, 0xa3, 0xbe, 0x68, 0xd7, 0x3f, 0x2b, 0x42,
	0x6d, 0x37, 0x74, 0x8f, 0x2c, 0x46, 0xb6, 0xf9, 0xe4, 0xe4, 0x71, 0x0c, 0x34, 0xc9, 0x3f, 0xbb,
	0x24, 0x62, 0xd8, 0x80, 0xb2, 0xdd, 0x8d, 0x18, 0xf5, 0x48, 0xa8, 0xa1, 0x65, 0x54, 0xaf, 0x6c,
	0x5e, 0x6d, 0x24, 0x5c, 0x1a, 0xdb, 0xd2, 0x65, 0x26, 0x20, 0x6c, 0x40, 0xd1, 0x65, 0xc4, 0x8b,
	0xb4, 0xdc, 0x72, 0xbe, 0x5e, 0xd9, 0xbc, 0x9c, 0x42, 0xb7, 0x18, 0xf1, 0x9a, 0xe5, 0xd3, 0x66,
	0xf1, 0x05, 0xca, 0x95, 0x91, 0x29, 0x70, 0xf8, 0x0f, 0x50, 0x7d, 0xea, 0x76, 0x3a, 0xf1, 0x9a,
	0x5d, 0x7f, 0x9f, 0x6a, 0x79, 0x3e, 0xcb, 0x4c, 0xaa, 0x5f, 0x53, 0xb8, 0x5b, 0xfe, 0x3e, 0x35,
	0x2b, 0x4f, 0xcf, 0x0c, 0xfc, 0x27, 0x98, 0x88, 0x0e, 0xdd, 0x20, 0x48, 0xfa, 0x16, 0x78, 0xdf,
	0xd9, 0x54, 0xdf, 0x27, 0xd2, 0xcf, 0x3b, 0x57, 0xa3, 0x94, 0x85, 0xe7, 0xa1, 0xe0, 0x53, 0x46,
	0xb4, 0xe2, 0x32, 0xaa, 0x8f, 0x73, 0x5e, 0x61, 0x5e, 0xfb, 0x01, 0x99, 0xbc, 0x15, 0x2f, 0x41,
	0xe5, 0x20, 0xb4, 0x7c, 0xa7, 0xcd, 0x28, 0xb3, 0x3a, 0xda, 0xd8, 0x32, 0xaa, 0x17, 0x4c, 0xe0,
	0x4d, 0x7b, 0x71, 0x0b, 0xfe, 0x35, 0x4c, 0x05, 0x56, 0xc8, 0x7c, 0x12, 0xb6, 0x43, 0xb2, 0xdf,
	0xb6, 0xa9, 0x43, 0xb4, 0x12, 0x1f, 0xaa, 0x74, 0xda, 0x2c, 0x84, 0x39, 0x6d, 0xd3, 0x9c, 0x94,
	0x00, 0x93, 0xec, 0x6f, 0x53, 0x87, 0x60, 0x1d, 0xca, 0x09, 0xb4, 0xdc, 0x0b, 0x2d, 0x85, 0x12,
	0xd3, 0x80, 0x09, 0x46, 0x42, 0xcf, 0xf5, 0xad, 0x8e, 0x00, 0x8e, 0x73, 0xe0, 0xf8, 0x69, 0x73,
	0x2c, 0x2c, 0x4c, 0x21, 0x6d, 0xd3, 0xac, 0x2a, 0x3f, 0xc7, 0xff, 0x06, 0x20, 0x08, 0xa9, 0x47,
	0xb9, 0x08, 0x34, 0xe0, 0x9b, 0x3e, 0x9d, 0xda, 0x80, 0x5d, 0xe5, 0x34, 0x53, 0x38, 0x7c, 0x07,
	0x4a, 0x1d, 0x7a, 0x6c, 0x75, 0xd8, 0xb1, 0x56, 0xe1, 0x7b, 0x86, 0x53, 0x5d, 0x1e, 0x09, 0x8f,
	0xa9, 0x20, 0xf8, 0xb7, 0x50, 0xb1, 0xa9, 0xd3, 0x0e, 0xac, 0x63, 0x8f, 0xf8, 0x4c, 0xab, 0xf2,
	0x1e, 0xd7, 0xd2, 0x3a, 0x78, 0xbc, 0xb3, 0x2b, 0x9c, 0x26, 0xd8, 0xd4, 0x91, 0xdf, 0xf8, 0x21,
	0x4c, 0x38, 0xa4, 0xe3, 0x1e, 0x91, 0xf0, 0xb8, 0xcd, 0x8e, 0x03, 0xa2, 0x4d, 0x2c, 0xa3, 0xfa,
	0x64, 0xcf, 0xf9, 0xec, 0x48, 0xff, 0xde, 0x71, 0x40, 0x9a, 0x70, 0xda, 0x2c, 0x9d, 0xa0, 0xc2,
	0x14, 0x5a, 0xbe, 0x64, 0x56, 0x9d, 0x94, 0x47, 0x7f, 0x91, 0x87, 0xa5, 0x96, 0xcf, 0x48, 0xe8,
	0x5b, 0x1d, 0x93, 0xd8, 0x34, 0x54, 0x73, 0xb4, 0x76, 0xff, 0xa6, 0xa4, 0xba, 0xd2, 0xbf, 0x73,
	0xb1, 0x5e, 0xc7, 0xfb, 0xb6, 0x6b, 0x09, 0x2a, 0x1e, 0x61, 0x87, 0xd4, 0x11, 0x90, 0x1c, 0x87,
	0x80, 0x68, 0xe2, 0x80, 0x1b, 0x50, 0x55, 0xc7, 0xca, 0x11, 0x79, 0x8e, 0xa8, 0xc8, 0x36, 0x0e,
	0x59, 0x00, 0xe0, 0x0b, 0x10, 0x80, 0x02, 0x07, 0x88, 0x0b, 0xca, 0xdd, 0x33, 0x30, 0x66, 0x79,
	0xb4, 0xeb, 0x33, 0xae, 0xac, 0xbc, 0x29, 0x2d, 0xbc, 0x0e, 0x53, 0x2c, 0xb4, 0xfc, 0xc8, 0xb2,
	0xe3, 0x33, 0x10, 0x9d, 0xc7, 0x78, 0xe7, 0xcb, 0xa9, 0x76, 0x3e, 0xc4, 0x0a, 0x4c, 0x84, 0x24,
	0x0a, 0xa8, 0x1f, 0x91, 0x94, 0xb0, 0xcc, 0xaa, 0x6a, 0xe4, 0xa0, 0x75, 0x98, 0x4a, 0x40, 0x1e,
	0x89, 0x22, 0xeb, 0x40, 0xaa, 0xca, 0xbc, 0xac, 0xda, 0xff, 0x2a, 0x9a, 0xf1, 0xef, 0x41, 0x53,
	0x8b, 0x1a, 0xa0, 0xc0, 0xf5, 0x65, 0xce, 0x48, 0xff, 0x5e, 0x1f, 0x93, 0x1a, 0x94, 0xed, 0x43,
	0x62, 0x3f, 0x8b, 0xba, 0x9e, 0x06, 0x1c, 0x99, 0xd8, 0xfa, 0x09, 0x82, 0x45, 0x15, 0x3a, 0x0e,
	0x2d, 0xff, 0x80, 0xa4, 0x64, 0x20, 0xcf, 0xa4, 0xde, 0xb3, 0x55, 0xa8, 0x57, 0xca, 0xd3, 0xe9,
	0x5d, 0xeb, 0xd3, 0x58, 0x6e, 0x44, 0x8d, 0xe9, 0x2d, 0x58, 0x50, 0xc2, 0xf8, 0x33, 0x61, 0x3c,
	0x76, 0x35, 0x8f, 0xe3, 0x11, 0xdf, 0x9a, 0x82, 0xfe, 0x10, 0xe6, 0xe5, 0x72, 0xde, 0x77, 0xa4,
	0x7f, 0xc0, 0x5c, 0x12, 0x53, 0x7d, 0x9b, 0x74, 0x7a, 0x42, 0xea, 0xe8, 0x7b, 0x32, 0x03, 0x63,
	0x21, 0xb1, 0x22, 0xea, 0x4b, 0x9d, 0x4a, 0x4b, 0x27, 0x30, 0xa7, 0xd6, 0xfc, 0xc8, 0x8d, 0x04,
	0xd5, 0x48, 0x0d, 0x5f, 0x83, 0x72, 0xc4, 0x2c, 0x46, 0xda, 0xae, 0x2f, 0x6f, 0x40, 0x62, 0xc7,
	0x03, 0xd2, 0xfd, 0xfd, 0x88, 0x30, 0x35, 0xa0, 0xb0, 0xf0, 0x34, 0x14, 0x3b, 0xae, 0xe7, 0x32,
	0xa9, 0x76, 0x61, 0xe8, 0x0e, 0x68, 0x72, 0x15, 0x3f, 0xe5, 0x2c, 0x1f, 0x21, 0x58, 0x51, 0xab,
	0x79, 0x62, 0x1f, 0x12, 0xa7, 0xdb, 0x11, 0x29, 0x68, 0x9b, 0x7a, 0x9e, 0xe5, 0x3b, 0x6a, 0xc6,
	0x39, 0x28, 0x8b, 0x6d, 0x73, 0x1d, 0x39, 0x63, 0x89, 0xdb, 0x2d, 0x27, 0xbe, 0xd4, 0xe4, 0x39,
	0xb1, 0xbb, 0x8c, 0x38, 0x6d, 0x4b, 0xcc, 0x5a, 0x30, 0x41, 0x35, 0x3d, 0x60, 0x78, 0x03, 0x0a,
	0x3c, 0xfe, 0xe4, 0x79, 0xfc, 0x49, 0xe7, 0x16, 0x39, 0x49, 0x1c, 0x64, 0x4c, 0x8e, 0xd1, 0x5f,
	0x21, 0xb8, 0x9e, 0x99, 0x10, 0xc5, 0x95, 0xc2, 0x93, 0x90, 0x93, 0x0c, 0x0a, 0x66, 0xce, 0x75,
	0x30, 0x86, 0x42, 0x2a, 0x94, 0xf0, 0xef, 0x78, 0xa5, 0x7c, 0x37, 0xd4, 0x4a, 0xb9, 0xd1, 0x9f,
	0x52, 0x0a, 0x03, 0x29, 0x65, 0x01, 0x80, 0x3c, 0x0f, 0xdc, 0x50, 0x2c, 0xa3, 0xc8, 0xfd, 0xe3,
	0xb2, 0xe5, 0x01, 0xd3, 0x9f, 0xc1, 0xf2, 0xf0, 0x18, 0x28, 0xd9, 0x29, 0x36, 0x28, 0xc5, 0x46,
	0x83, 0x92, 0x8a, 0x0f, 0x82, 0xa4, 0x32, 0xe3, 0x3d, 0x65, 0xa1, 0x65, 0x93, 0x78, 0x4f, 0x05,
	0xd5, 0x12, 0xb7, 0x5b, 0x8e, 0xfe, 0xdf, 0x22, 0x2c, 0x0c, 0xb9, 0x0d, 0x72, 0xaa, 0xb7, 0x2e,
	0x0d, 0xd6, 0xce, 0x2f, 0x0d, 0x54, 0x41, 0x80, 0x65, 0x5e, 0x16, 0x84, 0x44, 0x36, 0xee, 0x2f,
	0x12, 0x0a, 0xef, 0x51, 0x24, 0x14, 0xdf, 0xa6, 0x48, 0xb8, 0xb0, 0x0c, 0x98, 0x4b, 0xe5, 0x74,
	0x11, 0xa5, 0x93, 0x54, 0x5e, 0xcf, 0xa8, 0x10, 0x44, 0x80, 0xee, 0x2f, 0x0c, 0x56, 0x32, 0x93,
	0xfe, 0x40, 0xa6, 0x2f, 0xcb, 0xe8, 0xa8, 0xf2, 0xbc, 0x96, 0xce, 0xf3, 0xc2, 0xb5, 0x43, 0x98,
	0xe5, 0x76, 0xcc, 0x04, 0x19, 0x5f, 0xc6, 0x58, 0x7d, 0xdd, 0x88, 0x27, 0xfa, 0x71, 0x53, 0x5a,
	0xf1, 0xb6, 0xf4, 0xe6, 0xe6, 0xea, 0xb9, 0xb9, 0xb9, 0x37, 0x1f, 0xe3, 0xbb, 0x80, 0x93, 0x6a,
	0xa2, 0xed, 0xb8, 0x91, 0xcd, 0xf3, 0xdd, 0x04, 0xdf, 0x9d, 0x2b, 0x89, 0x67, 0x47, 0x3a, 0x78,
	0xfe, 0x49, 0xe0, 0xe9, 0x0c, 0xe4, 0x3a, 0xda, 0xa4, 0xcc, 0x3f, 0xca, 0x9f, 0xca, 0x40, 0x2d,
	0x47, 0xff, 0x5f, 0x11, 0x16, 0x87, 0xc5, 0xf7, 0x0f, 0x3a, 0xfc, 0xa0, 0xc3, 0x9f, 0x4b, 0x87,
	0x7b, 0xb0, 0x7a, 0x7e, 0x92, 0x7a, 0x97, 0xf8, 0xab, 0x3f, 0x86, 0xa5, 0xa1, 0x05, 0xd4, 0x3b,
	0x0d, 0xf8, 0x97, 0xd4, 0x63, 0x2e, 0x55, 0x78, 0xbc, 0xd3, 0x58, 0x1f, 0x23, 0xa8, 0x65, 0x95,
	0x19, 0x72, 0xb0, 0x69, 0x28, 0x0a, 0x2d, 0xc6, 0xa3, 0x4d, 0x98, 0xc2, 0x38, 0xcb, 0xf1, 0x39,
	0xd1, 0xca, 0x8d, 0x54, 0x45, 0x90, 0xe7, 0xcd, 0xaa, 0x22, 0xd8, 0x84, 0x31, 0x71, 0xcc, 0x5a,
	0x81, 0x0b, 0xa9, 0x96, 0xbe, 0x0c, 0xae, 0x17, 0x74, 0xdc, 0x7d, 0x97, 0x38, 0x62, 0x11, 0x12,
	0xa9, 0xbf, 0x44, 0x49, 0x71, 0xf5, 0x0b, 0x62, 0xf5, 0x3b, 0x28, 0xc9, 0x67, 0x53, 0xaa, 0xfe,
	0x8f, 0x39, 0xe4, 0x92, 0xfa, 0x7f, 0x1a, 0x8a, 0x01, 0x75, 0x7d, 0x55, 0x9f, 0x08, 0x43, 0x5f,
	0x05, 0x38, 0x3b, 0xf5, 0xbe, 0xbe, 0x05, 0xd5, 0x77, 0xf3, 0x7b, 0x80, 0x6b, 0x42, 0x6f, 0xea,
	0x07, 0xc1, 0x13, 0xf1, 0x7f, 0x00, 0xff, 0x1f, 0xc1, 0xd5, 0x8c, 0x72, 0x05, 0xaf, 0xf5, 0xbc,
	0x01, 0x87, 0xbd, 0xef, 0x6b, 0x37, 0x2f, 0x82, 0x89, 0x7d, 0xd5, 0x6f, 0x9c, 0x7c, 0xfd, 0xdd,
	0xcb, 0xdc, 0x75, 0x7d, 0x86, 0xff, 0x77, 0x08, 0x04, 0xd2, 0x38, 0xda, 0x92, 0xff, 0x2e, 0xee,
	0xa3, 0x0d, 0xfc, 0x05, 0x82, 0xd9, 0x21, 0x6a, 0xc6, 0xeb, 0x19, 0xd3, 0x64, 0x3f, 0x19, 0x6a,
	0x1b, 0xa3, 0x40, 0x25, 0xab, 0x3f, 0x72, 0x56, 0xf7, 0xf4, 0x5f, 0x65, 0xb3, 0x32, 0xfe, 0x75,
	0x56, 0x68, 0xff, 0xdb, 0xb0, 0xa9, 0x73, 0x57, 0x85, 0xa3, 0x98, 0xef, 0x2b, 0x04, 0xd7, 0x32,
	0x2b, 0x1c, 0x7c, 0x6b, 0x90, 0x42, 0xe6, 0x8b, 0xa0, 0x56, 0xbf, 0x18, 0x28, 0x99, 0xde, 0xe6,
	0x4c, 0xd7, 0xf0, 0xca, 0x08, 0x4c, 0xf1, 0x7f, 0xe0, 0xca, 0x80, 0xc2, 0xf1, 0xca, 0xe0, 0x5c,
	0x03, 0x65, 0x79, 0x6d, 0xf5, 0x7c, 0x90, 0x24, 0xb3, 0xc8, 0xc9, 0x68, 0x78, 0xc8, 0x61, 0xe2,
	0xd7, 0x08, 0xf0, 0x60, 0x18, 0xc1, 0xab, 0x59, 0x5a, 0xe9, 0x7f, 0xde, 0xd4, 0xd6, 0x2e, 0x40,
	0x49, 0x0e, 0xf7, 0x38, 0x07, 0x43, 0xdf, 0x18, 0xe9, 0xe8, 0xf8, 0x00, 0xf1, 0xa1, 0x7d, 0x8e,
	0x40, 0x1b, 0x56, 0x04, 0xe3, 0xb4, 0x74, 0x2e, 0xf8, 0x5b, 0x50, 0xbb, 0x3d, 0x12, 0x56, 0x92,
	0x35, 0x38, 0xd9, 0x75, 0x7d, 0x95, 0x93, 0x75, 0x25, 0x3c, 0xc5, 0x56, 0xe9, 0xca, 0x70, 0x03,
	0x3f, 0xa6, 0xf9, 0x09, 0x82, 0x99, 0xec, 0xb2, 0x05, 0xd7, 0x33, 0x26, 0xce, 0x56, 0xd7, 0xfa,
	0x08, 0x48, 0x49, 0xf0, 0x0e, 0x27, 0x78, 0x13, 0x0f, 0x25, 0xd8, 0xa3, 0xaf, 0x13, 0x04, 0x78,
	0x30, 0xb2, 0xf7, 0x9c, 0xef, 0xd0, 0xf7, 0x65, 0xcf, 0xf9, 0x0e, 0x4f, 0x0f, 0xfa, 0x12, 0x67,
	0x34, 0x87, 0x67, 0x87, 0x30, 0xc2, 0x9f, 0x22, 0x98, 0x3f, 0x2f, 0xa5, 0xe2, 0x46, 0xc6, 0x44,
	0xe7, 0x3c, 0x10, 0x6b, 0xc6, 0xc8, 0xf8, 0xcc, 0x98, 0x96, 0x50, 0x8c, 0x64, 0x9f, 0xfb, 0x68,
	0xa3, 0x79, 0xf7, 0xcb, 0x37, 0x8b, 0xe8, 0xab, 0x37, 0x8b, 0xe8, 0x9b, 0x37, 0x8b, 0xe8, 0xf5,
	0xb7, 0x8b, 0x97, 0xfe, 0x7e, 0x3d, 0x0c, 0xec, 0x06, 0x23, 0xcf, 0xa8, 0x15, 0xb8, 0x51, 0xc3,
	0xa6, 0x9e, 0x11, 0x06, 0xb6, 0x5c, 0xd3, 0xd3, 0x31, 0xfe, 0x4f, 0x75, 0xeb, 0xc7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x27, 0x81, 0x9e, 0x59, 0xd8, 0x15, 0x00, 0x00,
}

func (m *PrivateCaptureOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCaptureOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCaptureOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeliveryType != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.DeliveryType))
		i--
		dAtA[i] = 0x68
	}
	if m.CodPayment != nil {
		{
			size, err := m.CodPayment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Loyalty != nil {
		{
			size, err := m.Loyalty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Promotions) > 0 {
		for iNdEx := len(m.Promotions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Promotions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TerminalCode) > 0 {
		i -= len(m.TerminalCode)
		copy(dAtA[i:], m.TerminalCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.TerminalCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RefCode) > 0 {
		i -= len(m.RefCode)
		copy(dAtA[i:], m.RefCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.RefCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PartnerRefCode) > 0 {
		i -= len(m.PartnerRefCode)
		copy(dAtA[i:], m.PartnerRefCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PartnerRefCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GrandTotal != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.GrandTotal))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ShippingInfo != nil {
		{
			size, err := m.ShippingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BillingInfo != nil {
		{
			size, err := m.BillingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Customer != nil {
		{
			size, err := m.Customer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalRecordPaymentIPNRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalRecordPaymentIPNRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalRecordPaymentIPNRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PartnerTransactionCode) > 0 {
		i -= len(m.PartnerTransactionCode)
		copy(dAtA[i:], m.PartnerTransactionCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PartnerTransactionCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ResponseMessage) > 0 {
		i -= len(m.ResponseMessage)
		copy(dAtA[i:], m.ResponseMessage)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.ResponseMessage)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResponseCode) > 0 {
		i -= len(m.ResponseCode)
		copy(dAtA[i:], m.ResponseCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.ResponseCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TransactionCode) > 0 {
		i -= len(m.TransactionCode)
		copy(dAtA[i:], m.TransactionCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.TransactionCode)))
		i--
		dAtA[i] = 0x32
	}
	if m.Amount != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrderCode) > 0 {
		i -= len(m.OrderCode)
		copy(dAtA[i:], m.OrderCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.OrderCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PartnerCode) > 0 {
		i -= len(m.PartnerCode)
		copy(dAtA[i:], m.PartnerCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PartnerCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MethodCode) > 0 {
		i -= len(m.MethodCode)
		copy(dAtA[i:], m.MethodCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.MethodCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TerminalCode) > 0 {
		i -= len(m.TerminalCode)
		copy(dAtA[i:], m.TerminalCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.TerminalCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateChangeCODPaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateChangeCODPaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateChangeCODPaymentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CodPayment != nil {
		{
			size, err := m.CodPayment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderCode) > 0 {
		i -= len(m.OrderCode)
		copy(dAtA[i:], m.OrderCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.OrderCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalGetOrderByCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalGetOrderByCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalGetOrderByCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderCode) > 0 {
		i -= len(m.OrderCode)
		copy(dAtA[i:], m.OrderCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.OrderCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateGetOrderByCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateGetOrderByCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateGetOrderByCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderCode) > 0 {
		i -= len(m.OrderCode)
		copy(dAtA[i:], m.OrderCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.OrderCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateCancelOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCancelOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCancelOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderCode) > 0 {
		i -= len(m.OrderCode)
		copy(dAtA[i:], m.OrderCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.OrderCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalListOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalListOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalListOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		i -= len(m.Limit)
		copy(dAtA[i:], m.Limit)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Limit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StateIn) > 0 {
		i -= len(m.StateIn)
		copy(dAtA[i:], m.StateIn)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.StateIn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateListOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateListOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateListOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Limit) > 0 {
		i -= len(m.Limit)
		copy(dAtA[i:], m.Limit)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Limit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StateIn) > 0 {
		i -= len(m.StateIn)
		copy(dAtA[i:], m.StateIn)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.StateIn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalScheduleOrderCommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalScheduleOrderCommandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalScheduleOrderCommandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.ExecutedAt != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.ExecutedAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateCaptureOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCaptureOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCaptureOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiredAt != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.ExpiredAt))
		i--
		dAtA[i] = 0x28
	}
	if m.GrandTotal != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.GrandTotal))
		i--
		dAtA[i] = 0x20
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InternalRecordPaymentIPNResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalRecordPaymentIPNResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalRecordPaymentIPNResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TraceId) > 0 {
		i -= len(m.TraceId)
		copy(dAtA[i:], m.TraceId)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.TraceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateGetOrderByCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateGetOrderByCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateGetOrderByCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PromotionTransactionId) > 0 {
		i -= len(m.PromotionTransactionId)
		copy(dAtA[i:], m.PromotionTransactionId)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PromotionTransactionId)))
		i--
		dAtA[i] = 0x72
	}
	if m.PromotionDiscount != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.PromotionDiscount))
		i--
		dAtA[i] = 0x68
	}
	if m.DeliveryType != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.DeliveryType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TerminalCode) > 0 {
		i -= len(m.TerminalCode)
		copy(dAtA[i:], m.TerminalCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.TerminalCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PartnerRefCode) > 0 {
		i -= len(m.PartnerRefCode)
		copy(dAtA[i:], m.PartnerRefCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PartnerRefCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RefCode) > 0 {
		i -= len(m.RefCode)
		copy(dAtA[i:], m.RefCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.RefCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GrandTotal != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.GrandTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.ShippingInfo != nil {
		{
			size, err := m.ShippingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BillingInfo != nil {
		{
			size, err := m.BillingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Customer != nil {
		{
			size, err := m.Customer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalGetOrderByCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalGetOrderByCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalGetOrderByCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PromotionTransactionId) > 0 {
		i -= len(m.PromotionTransactionId)
		copy(dAtA[i:], m.PromotionTransactionId)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PromotionTransactionId)))
		i--
		dAtA[i] = 0x72
	}
	if m.PromotionDiscount != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.PromotionDiscount))
		i--
		dAtA[i] = 0x68
	}
	if m.DeliveryType != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.DeliveryType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TerminalCode) > 0 {
		i -= len(m.TerminalCode)
		copy(dAtA[i:], m.TerminalCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.TerminalCode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PartnerRefCode) > 0 {
		i -= len(m.PartnerRefCode)
		copy(dAtA[i:], m.PartnerRefCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.PartnerRefCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RefCode) > 0 {
		i -= len(m.RefCode)
		copy(dAtA[i:], m.RefCode)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.RefCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GrandTotal != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.GrandTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.ShippingInfo != nil {
		{
			size, err := m.ShippingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.BillingInfo != nil {
		{
			size, err := m.BillingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Customer != nil {
		{
			size, err := m.Customer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCapturingService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalScheduleOrderCommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalScheduleOrderCommandResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalScheduleOrderCommandResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateChangeCODPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateChangeCODPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateChangeCODPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateCancelOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateCancelOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateCancelOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCapturingService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InternalListOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalListOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalListOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Offset != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrivateListOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateListOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateListOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCapturingService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Offset != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Total != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Loyalty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loyalty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loyalty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Point != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *CODPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CODPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CODPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintCapturingService(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCapturingService(dAtA []byte, offset int, v uint64) int {
	offset -= sovCapturingService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivateCaptureOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Customer != nil {
		l = m.Customer.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	if m.BillingInfo != nil {
		l = m.BillingInfo.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.ShippingInfo != nil {
		l = m.ShippingInfo.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.GrandTotal != 0 {
		n += 1 + sovCapturingService(uint64(m.GrandTotal))
	}
	l = len(m.PartnerRefCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.RefCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.TerminalCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if len(m.Promotions) > 0 {
		for _, e := range m.Promotions {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	if m.Loyalty != nil {
		l = m.Loyalty.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.CodPayment != nil {
		l = m.CodPayment.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.DeliveryType != 0 {
		n += 1 + sovCapturingService(uint64(m.DeliveryType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalRecordPaymentIPNRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TerminalCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.MethodCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.PartnerCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.OrderCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovCapturingService(uint64(m.Amount))
	}
	l = len(m.TransactionCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.ResponseCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.ResponseMessage)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.PartnerTransactionCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateChangeCODPaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.CodPayment != nil {
		l = m.CodPayment.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalGetOrderByCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateGetOrderByCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateCancelOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalListOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateIn)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Limit)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateListOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StateIn)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Limit)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalScheduleOrderCommandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.ExecutedAt != 0 {
		n += 1 + sovCapturingService(uint64(m.ExecutedAt))
	}
	if m.Type != 0 {
		n += 1 + sovCapturingService(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateCaptureOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCapturingService(uint64(m.Id))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.GrandTotal != 0 {
		n += 1 + sovCapturingService(uint64(m.GrandTotal))
	}
	if m.ExpiredAt != 0 {
		n += 1 + sovCapturingService(uint64(m.ExpiredAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalRecordPaymentIPNResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateGetOrderByCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Customer != nil {
		l = m.Customer.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.BillingInfo != nil {
		l = m.BillingInfo.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.ShippingInfo != nil {
		l = m.ShippingInfo.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.GrandTotal != 0 {
		n += 1 + sovCapturingService(uint64(m.GrandTotal))
	}
	l = len(m.RefCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.PartnerRefCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.TerminalCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.DeliveryType != 0 {
		n += 1 + sovCapturingService(uint64(m.DeliveryType))
	}
	if m.PromotionDiscount != 0 {
		n += 1 + sovCapturingService(uint64(m.PromotionDiscount))
	}
	l = len(m.PromotionTransactionId)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalGetOrderByCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Customer != nil {
		l = m.Customer.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.BillingInfo != nil {
		l = m.BillingInfo.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.ShippingInfo != nil {
		l = m.ShippingInfo.Size()
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.GrandTotal != 0 {
		n += 1 + sovCapturingService(uint64(m.GrandTotal))
	}
	l = len(m.RefCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.PartnerRefCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.TerminalCode)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.DeliveryType != 0 {
		n += 1 + sovCapturingService(uint64(m.DeliveryType))
	}
	if m.PromotionDiscount != 0 {
		n += 1 + sovCapturingService(uint64(m.PromotionDiscount))
	}
	l = len(m.PromotionTransactionId)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalScheduleOrderCommandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateChangeCODPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateCancelOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCapturingService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InternalListOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovCapturingService(uint64(m.Total))
	}
	if m.Limit != 0 {
		n += 1 + sovCapturingService(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCapturingService(uint64(m.Offset))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateListOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovCapturingService(uint64(m.Total))
	}
	if m.Limit != 0 {
		n += 1 + sovCapturingService(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCapturingService(uint64(m.Offset))
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovCapturingService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Loyalty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 5
	}
	if m.Point != 0 {
		n += 1 + sovCapturingService(uint64(m.Point))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CODPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovCapturingService(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCapturingService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCapturingService(x uint64) (n int) {
	return sovCapturingService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateCaptureOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCaptureOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCaptureOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Customer == nil {
				m.Customer = &Customer{}
			}
			if err := m.Customer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingInfo == nil {
				m.BillingInfo = &BillingInfo{}
			}
			if err := m.BillingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingInfo == nil {
				m.ShippingInfo = &ShippingInfo{}
			}
			if err := m.ShippingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			m.GrandTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrandTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerRefCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerRefCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Promotions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Promotions = append(m.Promotions, &Promotion{})
			if err := m.Promotions[len(m.Promotions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loyalty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loyalty == nil {
				m.Loyalty = &Loyalty{}
			}
			if err := m.Loyalty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodPayment == nil {
				m.CodPayment = &CODPayment{}
			}
			if err := m.CodPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryType", wireType)
			}
			m.DeliveryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryType |= DeliveryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalRecordPaymentIPNRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalRecordPaymentIPNRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalRecordPaymentIPNRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerTransactionCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerTransactionCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateChangeCODPaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateChangeCODPaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateChangeCODPaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CodPayment == nil {
				m.CodPayment = &CODPayment{}
			}
			if err := m.CodPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalGetOrderByCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalGetOrderByCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalGetOrderByCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateGetOrderByCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateGetOrderByCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateGetOrderByCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateCancelOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCancelOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCancelOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalListOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalListOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalListOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateListOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateListOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateListOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalScheduleOrderCommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalScheduleOrderCommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalScheduleOrderCommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutedAt", wireType)
			}
			m.ExecutedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateCaptureOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCaptureOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCaptureOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			m.GrandTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrandTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredAt", wireType)
			}
			m.ExpiredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalRecordPaymentIPNResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalRecordPaymentIPNResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalRecordPaymentIPNResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateGetOrderByCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateGetOrderByCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateGetOrderByCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Customer == nil {
				m.Customer = &Customer{}
			}
			if err := m.Customer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingInfo == nil {
				m.BillingInfo = &BillingInfo{}
			}
			if err := m.BillingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingInfo == nil {
				m.ShippingInfo = &ShippingInfo{}
			}
			if err := m.ShippingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			m.GrandTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrandTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerRefCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerRefCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &PaymentDetail{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryType", wireType)
			}
			m.DeliveryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryType |= DeliveryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionDiscount", wireType)
			}
			m.PromotionDiscount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionDiscount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionTransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromotionTransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalGetOrderByCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalGetOrderByCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalGetOrderByCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Customer == nil {
				m.Customer = &Customer{}
			}
			if err := m.Customer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingInfo == nil {
				m.BillingInfo = &BillingInfo{}
			}
			if err := m.BillingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShippingInfo == nil {
				m.ShippingInfo = &ShippingInfo{}
			}
			if err := m.ShippingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrandTotal", wireType)
			}
			m.GrandTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrandTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerRefCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerRefCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &PaymentDetail{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryType", wireType)
			}
			m.DeliveryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryType |= DeliveryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionDiscount", wireType)
			}
			m.PromotionDiscount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionDiscount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionTransactionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromotionTransactionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalScheduleOrderCommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalScheduleOrderCommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalScheduleOrderCommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateChangeCODPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateChangeCODPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateChangeCODPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateCancelOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateCancelOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateCancelOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalListOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalListOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalListOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &SimplifiedOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateListOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateListOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateListOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCapturingService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCapturingService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &SimplifiedOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loyalty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loyalty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loyalty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CODPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CODPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CODPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCapturingService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCapturingService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCapturingService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCapturingService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCapturingService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCapturingService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCapturingService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCapturingService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCapturingService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCapturingService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCapturingService = fmt.Errorf("proto: unexpected end of group")
)
