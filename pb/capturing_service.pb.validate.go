// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/orders/v3/capturing_service.proto

package orders

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _capturing_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ChangeCODPaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangeCODPaymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ChangeCODPaymentResponseValidationError is the validation error returned by
// ChangeCODPaymentResponse.Validate if the designated constraints aren't met.
type ChangeCODPaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeCODPaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeCODPaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeCODPaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeCODPaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeCODPaymentResponseValidationError) ErrorName() string {
	return "ChangeCODPaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeCODPaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeCODPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeCODPaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeCODPaymentResponseValidationError{}

// Validate checks the field values on CancelOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// CancelOrderResponseValidationError is the validation error returned by
// CancelOrderResponse.Validate if the designated constraints aren't met.
type CancelOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderResponseValidationError) ErrorName() string {
	return "CancelOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderResponseValidationError{}

// Validate checks the field values on Loyalty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Loyalty) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	// no validation rules for Point

	return nil
}

// LoyaltyValidationError is the validation error returned by Loyalty.Validate
// if the designated constraints aren't met.
type LoyaltyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoyaltyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoyaltyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoyaltyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoyaltyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoyaltyValidationError) ErrorName() string { return "LoyaltyValidationError" }

// Error satisfies the builtin error interface
func (e LoyaltyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoyalty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoyaltyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoyaltyValidationError{}

// Validate checks the field values on CODPayment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CODPayment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Amount

	return nil
}

// CODPaymentValidationError is the validation error returned by
// CODPayment.Validate if the designated constraints aren't met.
type CODPaymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CODPaymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CODPaymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CODPaymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CODPaymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CODPaymentValidationError) ErrorName() string { return "CODPaymentValidationError" }

// Error satisfies the builtin error interface
func (e CODPaymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCODPayment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CODPaymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CODPaymentValidationError{}

// Validate checks the field values on CaptureOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CaptureOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CaptureOrderRequestValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetItems()) < 1 {
		return CaptureOrderRequestValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CaptureOrderRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetBillingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CaptureOrderRequestValidationError{
				field:  "BillingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetShippingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CaptureOrderRequestValidationError{
				field:  "ShippingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetNote()) > 255 {
		return CaptureOrderRequestValidationError{
			field:  "Note",
			reason: "value length must be at most 255 runes",
		}
	}

	// no validation rules for GrandTotal

	if utf8.RuneCountInString(m.GetPartnerRefCode()) > 50 {
		return CaptureOrderRequestValidationError{
			field:  "PartnerRefCode",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetRefCode()) > 50 {
		return CaptureOrderRequestValidationError{
			field:  "RefCode",
			reason: "value length must be at most 50 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetTerminalCode()); l < 1 || l > 50 {
		return CaptureOrderRequestValidationError{
			field:  "TerminalCode",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	for idx, item := range m.GetPromotions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CaptureOrderRequestValidationError{
					field:  fmt.Sprintf("Promotions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLoyalty()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CaptureOrderRequestValidationError{
				field:  "Loyalty",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCodPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CaptureOrderRequestValidationError{
				field:  "CodPayment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _CaptureOrderRequest_DeliveryType_NotInLookup[m.GetDeliveryType()]; ok {
		return CaptureOrderRequestValidationError{
			field:  "DeliveryType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := DeliveryType_name[int32(m.GetDeliveryType())]; !ok {
		return CaptureOrderRequestValidationError{
			field:  "DeliveryType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// CaptureOrderRequestValidationError is the validation error returned by
// CaptureOrderRequest.Validate if the designated constraints aren't met.
type CaptureOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptureOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptureOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptureOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptureOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptureOrderRequestValidationError) ErrorName() string {
	return "CaptureOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CaptureOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptureOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptureOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptureOrderRequestValidationError{}

var _CaptureOrderRequest_DeliveryType_NotInLookup = map[DeliveryType]struct{}{
	0: {},
}

// Validate checks the field values on CaptureOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CaptureOrderResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for State

	// no validation rules for GrandTotal

	// no validation rules for ExpiredAt

	return nil
}

// CaptureOrderResponseValidationError is the validation error returned by
// CaptureOrderResponse.Validate if the designated constraints aren't met.
type CaptureOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CaptureOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CaptureOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CaptureOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CaptureOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CaptureOrderResponseValidationError) ErrorName() string {
	return "CaptureOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CaptureOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCaptureOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CaptureOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CaptureOrderResponseValidationError{}

// Validate checks the field values on RecordPaymentIPNRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RecordPaymentIPNRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TerminalCode

	// no validation rules for MethodCode

	// no validation rules for PartnerCode

	// no validation rules for OrderCode

	// no validation rules for Amount

	// no validation rules for TransactionCode

	// no validation rules for ResponseCode

	// no validation rules for ResponseMessage

	// no validation rules for PartnerTransactionCode

	// no validation rules for Checksum

	return nil
}

// RecordPaymentIPNRequestValidationError is the validation error returned by
// RecordPaymentIPNRequest.Validate if the designated constraints aren't met.
type RecordPaymentIPNRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPaymentIPNRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPaymentIPNRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPaymentIPNRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPaymentIPNRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPaymentIPNRequestValidationError) ErrorName() string {
	return "RecordPaymentIPNRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPaymentIPNRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPaymentIPNRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPaymentIPNRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPaymentIPNRequestValidationError{}

// Validate checks the field values on RecordPaymentIPNResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RecordPaymentIPNResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for TraceId

	return nil
}

// RecordPaymentIPNResponseValidationError is the validation error returned by
// RecordPaymentIPNResponse.Validate if the designated constraints aren't met.
type RecordPaymentIPNResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordPaymentIPNResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordPaymentIPNResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordPaymentIPNResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordPaymentIPNResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordPaymentIPNResponseValidationError) ErrorName() string {
	return "RecordPaymentIPNResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecordPaymentIPNResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordPaymentIPNResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordPaymentIPNResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordPaymentIPNResponseValidationError{}

// Validate checks the field values on ChangeCODPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangeCODPaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	if v, ok := interface{}(m.GetCodPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeCODPaymentRequestValidationError{
				field:  "CodPayment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChangeCODPaymentRequestValidationError is the validation error returned by
// ChangeCODPaymentRequest.Validate if the designated constraints aren't met.
type ChangeCODPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeCODPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeCODPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeCODPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeCODPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeCODPaymentRequestValidationError) ErrorName() string {
	return "ChangeCODPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeCODPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeCODPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeCODPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeCODPaymentRequestValidationError{}

// Validate checks the field values on GetOrderByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrderByIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	return nil
}

// GetOrderByIdRequestValidationError is the validation error returned by
// GetOrderByIdRequest.Validate if the designated constraints aren't met.
type GetOrderByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByIdRequestValidationError) ErrorName() string {
	return "GetOrderByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByIdRequestValidationError{}

// Validate checks the field values on GetOrderByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrderByIdResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByIdResponseValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderByIdResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Note

	if v, ok := interface{}(m.GetBillingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByIdResponseValidationError{
				field:  "BillingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetShippingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByIdResponseValidationError{
				field:  "ShippingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GrandTotal

	// no validation rules for RefCode

	// no validation rules for PartnerRefCode

	// no validation rules for TerminalCode

	for idx, item := range m.GetPayments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrderByIdResponseValidationError{
					field:  fmt.Sprintf("Payments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Status

	// no validation rules for DeliveryType

	return nil
}

// GetOrderByIdResponseValidationError is the validation error returned by
// GetOrderByIdResponse.Validate if the designated constraints aren't met.
type GetOrderByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByIdResponseValidationError) ErrorName() string {
	return "GetOrderByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByIdResponseValidationError{}

// Validate checks the field values on CancelOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelOrderRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	// no validation rules for Reason

	return nil
}

// CancelOrderRequestValidationError is the validation error returned by
// CancelOrderRequest.Validate if the designated constraints aren't met.
type CancelOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRequestValidationError) ErrorName() string {
	return "CancelOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRequestValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListOrdersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for StateIn

	// no validation rules for Offset

	// no validation rules for Limit

	return nil
}

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrdersResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Limit

	// no validation rules for Offset

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on InternalScheduleOrderCommandRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *InternalScheduleOrderCommandRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrderId

	// no validation rules for ExecutedAt

	// no validation rules for Type

	return nil
}

// InternalScheduleOrderCommandRequestValidationError is the validation error
// returned by InternalScheduleOrderCommandRequest.Validate if the designated
// constraints aren't met.
type InternalScheduleOrderCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalScheduleOrderCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalScheduleOrderCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalScheduleOrderCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalScheduleOrderCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalScheduleOrderCommandRequestValidationError) ErrorName() string {
	return "InternalScheduleOrderCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InternalScheduleOrderCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalScheduleOrderCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalScheduleOrderCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalScheduleOrderCommandRequestValidationError{}

// Validate checks the field values on InternalScheduleOrderCommandResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *InternalScheduleOrderCommandResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// InternalScheduleOrderCommandResponseValidationError is the validation error
// returned by InternalScheduleOrderCommandResponse.Validate if the designated
// constraints aren't met.
type InternalScheduleOrderCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalScheduleOrderCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalScheduleOrderCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalScheduleOrderCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalScheduleOrderCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalScheduleOrderCommandResponseValidationError) ErrorName() string {
	return "InternalScheduleOrderCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InternalScheduleOrderCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalScheduleOrderCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalScheduleOrderCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalScheduleOrderCommandResponseValidationError{}
